{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IgnoringOutput"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/RxSwiftRex\/7RxSwift25ObservableConvertibleTypeP","doc:\/\/RxSwiftRex\/7RxSwift14ObservableTypeP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"title":"FireAndForget","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:10RxSwiftRex13FireAndForgetV","modules":[{"name":"RxSwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:)-6q3q8","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:)-9jpsr","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:catchErrors:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(_:)-8r6ki"]},{"title":"Type Aliases","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/Element"]},{"title":"Default Implementations","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableConvertibleType-Implementations"],"generated":true}],"references":{"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableType-Implementations":{"role":"collectionGroup","title":"ObservableType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/Element":{"role":"symbol","title":"FireAndForget.Element","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"}],"abstract":[{"type":"text","text":"Output type we are ignoring. It matches the FireAndForget generic parameter, so we can ignore anything we want."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/Element","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Element"}],"url":"\/documentation\/rxswiftrex\/fireandforget\/element"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribe(_:)-8r6ki":{"role":"symbol","title":"subscribe(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Observer"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Observer"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Disposable","preciseIdentifier":"s:7RxSwift10DisposableP"}],"abstract":[{"type":"text","text":"Subscribes "},{"type":"codeVoice","code":"observer"},{"type":"text","text":" to receive events for this sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(_:)-8r6ki","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/subscribe(_:)-8r6ki"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableConvertibleType-Implementations":{"role":"collectionGroup","title":"ObservableConvertibleType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableConvertibleType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observableconvertibletype-implementations"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/init(_:catchErrors:)":{"role":"symbol","title":"init(_:catchErrors:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Init a FireAndForget observable by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget can’t"},{"type":"text","text":" "},{"type":"text","text":"itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from the"},{"type":"text","text":" "},{"type":"text","text":"happy path."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:catchErrors:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/init(_:catcherrors:)"},"doc://RxSwiftRex/7RxSwift25ObservableConvertibleTypeP":{"type":"unresolvable","title":"RxSwift.ObservableConvertibleType","identifier":"doc:\/\/RxSwiftRex\/7RxSwift25ObservableConvertibleTypeP"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/init(_:)-6q3q8":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Init a FireAndForget observable by providing an upstream that never fails so we can simply ignore its output"}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:)-6q3q8","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/init(_:)-6q3q8"},"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/7RxSwift14ObservableTypeP":{"type":"unresolvable","title":"RxSwift.ObservableType","identifier":"doc:\/\/RxSwiftRex\/7RxSwift14ObservableTypeP"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/init(_:)-9jpsr":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Init a FireAndForget observable by providing a closure with the operation to execute and ignore the output."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:)-9jpsr","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/init(_:)-9jpsr"}}}