{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"("},{"kind":"externalParam","text":"replay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = 0, "},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubjectLifetimeScope","preciseIdentifier":"s:7RxSwift20SubjectLifetimeScopeO"},{"kind":"text","text":" = .whileConnected) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An observable sequence that contains the elements of a sequence produced by multicasting the source sequence."}]}]},{"kind":"parameters","parameters":[{"name":"replay","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maximum element count of the replay buffer."}]}]},{"name":"scope","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lifetime scope of sharing subject. For more information see "},{"type":"codeVoice","code":"SubjectLifetimeScope"},{"type":"text","text":" enum."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator is equivalent to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".whileConnected"}]}]}]},{"type":"codeListing","syntax":null,"code":["\/\/ Each connection will have it's own subject instance to store replay events.","\/\/ Connections will be isolated from each another.","source.multicast(makeSubject: { Replay.create(bufferSize: replay) }).refCount()"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".forever"}]}]}]},{"type":"codeListing","syntax":null,"code":["\/\/ One subject will store replay events for all connections to source.","\/\/ Connections won't be isolated from each another.","source.multicast(Replay.create(bufferSize: replay)).refCount()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It uses optimized versions of the operators for most common operations."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/share(replay:scope:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/share(replay:scope:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns an observable sequence that "},{"type":"strong","inlineContent":[{"type":"text","text":"shares a single subscription to the underlying sequence"}]},{"type":"text","text":", and immediately upon subscription replays  elements in buffer."}],"kind":"symbol","metadata":{"role":"symbol","title":"share(replay:scope:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"("},{"kind":"externalParam","text":"replay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubjectLifetimeScope","preciseIdentifier":"s:7RxSwift20SubjectLifetimeScopeO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:7RxSwift14ObservableTypePAAE5share6replay5scopeAA0C0Cy7ElementQzGSi_AA20SubjectLifetimeScopeOtF::SYNTHESIZED::s:10RxSwiftRex13FireAndForgetV","extendedModule":"RxSwift","modules":[{"name":"RxSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations"]]},"references":{"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableType-Implementations":{"role":"collectionGroup","title":"ObservableType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/share(replay:scope:)":{"role":"symbol","title":"share(replay:scope:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"("},{"kind":"externalParam","text":"replay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubjectLifetimeScope","preciseIdentifier":"s:7RxSwift20SubjectLifetimeScopeO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that "},{"type":"strong","inlineContent":[{"type":"text","text":"shares a single subscription to the underlying sequence"}]},{"type":"text","text":", and immediately upon subscription replays  elements in buffer."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/share(replay:scope:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/share(replay:scope:)"},"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"}}}