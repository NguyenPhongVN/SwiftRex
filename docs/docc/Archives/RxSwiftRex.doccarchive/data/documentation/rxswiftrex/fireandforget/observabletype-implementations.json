{"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"article","metadata":{"modules":[{"name":"RxSwiftRex"}],"role":"collectionGroup","title":"ObservableType Implementations"},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/amb(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asCompletable()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(dispatcher:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(file:function:line:info:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(token:dispatcher:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(token:file:function:line:info:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asMaybe()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asObservable()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asPublisherType()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asSingle()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/buffer(timeSpan:count:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catch(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchAndReturn(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchError(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchErrorJustReturn(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/compactMap(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concat()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concat(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concatMap(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/debounce(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/debug(_:trimOutput:file:line:function:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/decode(type:decoder:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/delay(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/delaySubscription(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/dematerialize()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(_:comparer:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(at:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/do(onNext:afterNext:onError:afterError:onCompleted:afterCompleted:onSubscribe:onSubscribed:onDispose:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/element(at:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/elementAt(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/enumerated()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/filter(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/first()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMap(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapFirst(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3b9vg","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3twgp","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/groupBy(keySelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ifEmpty(default:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ifEmpty(switchTo:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ignoreElements()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/map(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/materialize()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(maxConcurrent:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(_:selector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(makeSubject:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/observe(on:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/observeOn(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/publish()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/reduce(_:accumulator:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/reduce(_:accumulator:mapResult:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/replay(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/replayAll()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(when:)-3ggsc","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(when:)-52h9u","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retryWhen(_:)-28qao","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retryWhen(_:)-4ut3e","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/sample(_:defaultValue:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(_:accumulator:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(into:accumulator:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/share(replay:scope:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/single()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/single(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(until:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(while:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skipUntil(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skipWhile(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/startWith(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(_:)-7wehk","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(on:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(onNext:onError:onCompleted:onDisposed:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(with:onNext:onError:onCompleted:onDisposed:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribeOn(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/switchLatest()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(for:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(until:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(until:behavior:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(while:behavior:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeLast(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeUntil(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeUntil(_:predicate:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeWhile(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/throttle(_:latest:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timeout(_:other:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timeout(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/toArray()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/window(timeSpan:count:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withLatestFrom(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withLatestFrom(_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withUnretained(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withUnretained(_:resultSelector:)"],"generated":true},{"title":"Type Methods","identifiers":["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catch(sequence:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/create(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/deferred(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/empty()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/error(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(_:scheduler:)-6mrsy","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(_:scheduler:)-6um30","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(optional:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(optional:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/generate(initialState:condition:scheduler:iterate:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/interval(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/just(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/just(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-1gswg","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-2e4tp","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-6m1ss","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/never()","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/of(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/range(start:count:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/repeatElement(_:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timer(_:period:scheduler:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/using(_:observableFactory:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:_:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:resultSelector:)","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:resultSelector:)"],"generated":true}],"references":{"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asSingle()":{"role":"symbol","title":"asSingle()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asSingle"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Single","preciseIdentifier":"s:7RxSwift6Singlea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"asSingle"},{"type":"text","text":" operator throws a "},{"type":"codeVoice","code":"RxError.noElements"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RxError.moreThanOneElement"},{"type":"text","text":" "},{"type":"text","text":"if the source Observable does not emit exactly one element before successfully completing."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asSingle()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/assingle()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asEffect(file:function:line:info:)":{"role":"symbol","title":"asEffect(file:function:line:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asEffect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:10RxSwiftRex6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(file:function:line:info:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/aseffect(file:function:line:info:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/timeout(_:scheduler:)":{"role":"symbol","title":"timeout(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timeout"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies a timeout policy for each element in the observable sequence. If the next element isn’t received within the specified timeout duration starting from its predecessor, a TimeoutError is propagated to the observer."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timeout(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/timeout(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/scan(into:accumulator:)":{"role":"symbol","title":"scan(into:accumulator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(into:accumulator:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/scan(into:accumulator:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skipUntil(_:)":{"role":"symbol","title":"skipUntil(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipUntil"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the elements from the source observable sequence that are emitted after the other observable sequence produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skipUntil(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/skipuntil(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/flatMapLatest(_:)-3b9vg":{"role":"symbol","title":"flatMapLatest(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a new sequence of observable sequences and then"},{"type":"text","text":" "},{"type":"text","text":"transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3b9vg","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/flatmaplatest(_:)-3b9vg"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/first()":{"role":"symbol","title":"first()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Single","preciseIdentifier":"s:7RxSwift6Singlea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?>"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"first"},{"type":"text","text":" operator emits only the very first item emitted by this Observable,"},{"type":"text","text":" "},{"type":"text","text":"or nil if this Observable completes without emitting anything."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/first()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/first()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/withLatestFrom(_:)":{"role":"symbol","title":"withLatestFrom(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withLatestFrom"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges two observable sequences into one observable sequence by using latest element from the second sequence every time when "},{"type":"codeVoice","code":"self"},{"type":"text","text":" emits an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withLatestFrom(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/withlatestfrom(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribe(with:onNext:onError:onCompleted:onDisposed:)":{"role":"symbol","title":"subscribe(with:onNext:onError:onCompleted:onDisposed:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Object"},{"kind":"text","text":">("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onNext"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onError"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onCompleted"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onDisposed"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?) -> "},{"kind":"typeIdentifier","text":"Disposable","preciseIdentifier":"s:7RxSwift10DisposableP"}],"abstract":[{"type":"text","text":"Subscribes an element handler, an error handler, a completion handler and disposed handler to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(with:onNext:onError:onCompleted:onDisposed:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/subscribe(with:onnext:onerror:oncompleted:ondisposed:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/timer(_:period:scheduler:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"timer(_:period:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"period"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timer(_:period:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/timer(_:period:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asObservable()":{"role":"symbol","title":"asObservable()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asObservable"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Default implementation of converting "},{"type":"codeVoice","code":"ObservableType"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Observable"},{"type":"text","text":"."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asObservable()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/asobservable()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/range(start:count:scheduler:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"range(start:count:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"range"},{"kind":"text","text":"("},{"kind":"externalParam","text":"start"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to generate and send out observer messages."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/range(start:count:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/range(start:count:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/repeatElement(_:scheduler:)":{"role":"symbol","title":"repeatElement(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"repeatElement"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Generates an observable sequence that repeats the given element infinitely, using the specified scheduler to send out observer messages."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/repeatElement(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/repeatelement(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asEffect(token:file:function:line:info:)":{"role":"symbol","title":"asEffect(token:file:function:line:info:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asEffect"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"H"},{"kind":"text","text":">("},{"kind":"externalParam","text":"token"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"H"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"info"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:10RxSwiftRex6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(token:file:function:line:info:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/aseffect(token:file:function:line:info:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retry(when:)-3ggsc":{"role":"symbol","title":"retry(when:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TriggerObservable"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Error"},{"kind":"text","text":">("},{"kind":"externalParam","text":"when"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"TriggerObservable"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence on error when the notifier emits a next value."},{"type":"text","text":" "},{"type":"text","text":"If the source observable errors and the notifier completes, it will complete the source sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(when:)-3ggsc","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/retry(when:)-3ggsc"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/catch(sequence:)":{"role":"symbol","title":"catch(sequence:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`catch`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Sequence"},{"kind":"text","text":">("},{"kind":"externalParam","text":"sequence"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Sequence"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Continues an observable sequence that is terminated by an error with the next observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catch(sequence:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/catch(sequence:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/startWith(_:)":{"role":"symbol","title":"startWith(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"startWith"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"...) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Prepends a sequence of values to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/startWith(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/startwith(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/single(_:)":{"role":"symbol","title":"single(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"single"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The single operator is similar to first, but throws a "},{"type":"codeVoice","code":"RxError.NoElements"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RxError.MoreThanOneElement"},{"type":"text","text":" "},{"type":"text","text":"if the source Observable does not emit exactly one element before successfully completing."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/single(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/single(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ifEmpty(switchTo:)":{"role":"symbol","title":"ifEmpty(switchTo:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifEmpty"},{"kind":"text","text":"("},{"kind":"externalParam","text":"switchTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the elements of the specified sequence or "},{"type":"codeVoice","code":"switchTo"},{"type":"text","text":" sequence if the sequence is empty."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ifEmpty(switchTo:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/ifempty(switchto:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/catchError(_:)":{"role":"symbol","title":"catchError(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"catchError"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Continues an observable sequence that is terminated by an error with the observable sequence produced by the handler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchError(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/catcherror(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/reduce(_:accumulator:)":{"role":"symbol","title":"reduce(_:accumulator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies an "},{"type":"codeVoice","code":"accumulator"},{"type":"text","text":" function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified "},{"type":"codeVoice","code":"seed"},{"type":"text","text":" value is used as the initial accumulator value."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/reduce(_:accumulator:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/reduce(_:accumulator:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/replay(_:)":{"role":"symbol","title":"replay(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replay"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ConnectableObservable","preciseIdentifier":"s:7RxSwift21ConnectableObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/replay(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/replay(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retryWhen(_:)-4ut3e":{"role":"symbol","title":"retryWhen(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retryWhen"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TriggerObservable"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"TriggerObservable"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence on error when the notifier emits a next value."},{"type":"text","text":" "},{"type":"text","text":"If the source observable errors and the notifier completes, it will complete the source sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retryWhen(_:)-4ut3e","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/retrywhen(_:)-4ut3e"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribeOn(_:)":{"role":"symbol","title":"subscribeOn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribeOn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps the source sequence in order to run its subscription and unsubscription logic on the specified"},{"type":"text","text":" "},{"type":"text","text":"scheduler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribeOn(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/subscribeon(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/delaySubscription(_:scheduler:)":{"role":"symbol","title":"delaySubscription(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"delaySubscription"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/delaySubscription(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/delaysubscription(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/concatMap(_:)":{"role":"symbol","title":"concatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence to an observable sequence and concatenates the resulting observable sequences into one observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concatMap(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/concatmap(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/flatMapLatest(_:)-3twgp":{"role":"symbol","title":"flatMapLatest(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Infallible","preciseIdentifier":"s:7RxSwift10InfallibleV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a new sequence of observable sequences and then"},{"type":"text","text":" "},{"type":"text","text":"transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3twgp","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/flatmaplatest(_:)-3twgp"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/delay(_:scheduler:)":{"role":"symbol","title":"delay(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"delay"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence by the source observable sequence shifted forward in time by a specified delay. Error events from the source observable sequence are not delayed."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/delay(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/delay(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/multicast(makeSubject:)":{"role":"symbol","title":"multicast(makeSubject:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"multicast"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":">("},{"kind":"externalParam","text":"makeSubject"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ConnectableObservable","preciseIdentifier":"s:7RxSwift21ConnectableObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Multicasts the source sequence notifications through an instantiated subject to the resulting connectable observable."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(makeSubject:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/multicast(makesubject:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/withLatestFrom(_:resultSelector:)":{"role":"symbol","title":"withLatestFrom(_:resultSelector:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withLatestFrom"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ResultType"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ResultType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ResultType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges two observable sequences into one observable sequence by combining each element from self with the latest element from the second source, if any."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withLatestFrom(_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/withlatestfrom(_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/never()":{"role":"symbol","title":"never()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"never"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a non-terminating observable sequence, which can be used to denote an infinite duration."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/never()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/never()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/multicast(_:selector:)":{"role":"symbol","title":"multicast(_:selector:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"multicast"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":", "},{"kind":"externalParam","text":"selector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(_:selector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/multicast(_:selector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/flatMap(_:)":{"role":"symbol","title":"flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMap(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/flatmap(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/catchAndReturn(_:)":{"role":"symbol","title":"catchAndReturn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"catchAndReturn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Continues an observable sequence that is terminated by an error with a single element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchAndReturn(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/catchandreturn(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/concat(_:)":{"role":"symbol","title":"concat(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concat"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Concatenates the second observable sequence to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" upon successful termination of "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concat(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/concat(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/compactMap(_:)":{"role":"symbol","title":"compactMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into an optional form and filters all optional results."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/compactMap(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/compactmap(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/takeLast(_:)":{"role":"symbol","title":"takeLast(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"takeLast"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a specified number of contiguous elements from the end of an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeLast(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/takelast(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asEffect(dispatcher:)":{"role":"symbol","title":"asEffect(dispatcher:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asEffect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"dispatcher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:10RxSwiftRex6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(dispatcher:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/aseffect(dispatcher:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(for:scheduler:)":{"role":"symbol","title":"take(for:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(for:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/take(for:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asPublisherType()":{"role":"symbol","title":"asPublisherType()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asPublisherType"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"PublisherType","preciseIdentifier":"s:8SwiftRex13PublisherTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asPublisherType()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/aspublishertype()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ignoreElements()":{"role":"symbol","title":"ignoreElements()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ignoreElements"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Skips elements and completes (or errors) when the observable sequence completes (or errors). Equivalent to filter that always returns false."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ignoreElements()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/ignoreelements()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/enumerated()":{"role":"symbol","title":"enumerated()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"enumerated"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<(index"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", element"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Enumerates the elements of an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/enumerated()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/enumerated()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retry()":{"role":"symbol","title":"retry()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence until it successfully terminates."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/retry()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/do(onNext:afterNext:onError:afterError:onCompleted:afterCompleted:onSubscribe:onSubscribed:onDispose:)":{"role":"symbol","title":"do(onNext:afterNext:onError:afterError:onCompleted:afterCompleted:onSubscribe:onSubscribed:onDispose:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`do`"},{"kind":"text","text":"("},{"kind":"externalParam","text":"onNext"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"afterNext"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onError"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"afterError"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onCompleted"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"afterCompleted"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onSubscribe"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onSubscribed"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onDispose"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Invokes an action for each event in the observable sequence, and propagates all observer messages through the result sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/do(onNext:afterNext:onError:afterError:onCompleted:afterCompleted:onSubscribe:onSubscribed:onDispose:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/dematerialize()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EventConvertible"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"dematerialize()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dematerialize"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Convert any previously materialized Observable into it’s original form."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/dematerialize()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/dematerialize()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/groupBy(keySelector:)":{"role":"symbol","title":"groupBy(keySelector:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"groupBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Key"},{"kind":"text","text":">("},{"kind":"externalParam","text":"keySelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GroupedObservable","preciseIdentifier":"s:7RxSwift17GroupedObservableV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">>"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/groupBy(keySelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/groupby(keyselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/multicast(_:)":{"role":"symbol","title":"multicast(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"multicast"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ConnectableObservable","preciseIdentifier":"s:7RxSwift21ConnectableObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Multicasts the source sequence notifications through the specified subject to the resulting connectable observable."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/multicast(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/multicast(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retry(when:)-52h9u":{"role":"symbol","title":"retry(when:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TriggerObservable"},{"kind":"text","text":">("},{"kind":"externalParam","text":"when"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"TriggerObservable"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence on error when the notifier emits a next value."},{"type":"text","text":" "},{"type":"text","text":"If the source observable errors and the notifier completes, it will complete the source sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(when:)-52h9u","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/retry(when:)-52h9u"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skip(until:)":{"role":"symbol","title":"skip(until:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"until"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the elements from the source observable sequence that are emitted after the other observable sequence produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(until:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/skip(until:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/concat()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableConvertibleType"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"concat()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concat"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Concatenates all inner observable sequences, as long as the previous observable sequence terminated successfully."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/concat()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/concat()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/materialize()":{"role":"symbol","title":"materialize()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"materialize"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Event","preciseIdentifier":"s:7RxSwift5EventO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Convert any Observable into an Observable of its events."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/materialize()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/materialize()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/amb(_:)":{"role":"symbol","title":"amb(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"amb"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Propagates the observable sequence that reacts first."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/amb(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/amb(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/takeWhile(_:)":{"role":"symbol","title":"takeWhile(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"takeWhile"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns elements from an observable sequence as long as a specified condition is true."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeWhile(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/takewhile(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/using(_:observableFactory:)":{"role":"symbol","title":"using(_:observableFactory:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"using"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Resource"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Resource"},{"kind":"text","text":", "},{"kind":"externalParam","text":"observableFactory"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Resource"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence’s lifetime."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/using(_:observableFactory:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/using(_:observablefactory:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/just(_:)":{"role":"symbol","title":"just(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"just"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains a single element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/just(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/just(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/debounce(_:scheduler:)":{"role":"symbol","title":"debounce(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"debounce"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Ignores elements from an observable sequence which are followed by another element within a specified relative time duration, using the specified scheduler to run throttling timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/debounce(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/debounce(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retry(_:)":{"role":"symbol","title":"retry(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence the specified number of times in case of an error or until it successfully terminates."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retry(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/retry(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/interval(_:scheduler:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"interval(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"interval"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that produces a value after each period, using the specified scheduler to run timers and to send out observer messages."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/interval(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/interval(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skip(_:scheduler:)":{"role":"symbol","title":"skip(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skip"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/skip(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/scan(_:accumulator:)":{"role":"symbol","title":"scan(_:accumulator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(_:accumulator:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/scan(_:accumulator:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/share(replay:scope:)":{"role":"symbol","title":"share(replay:scope:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"("},{"kind":"externalParam","text":"replay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubjectLifetimeScope","preciseIdentifier":"s:7RxSwift20SubjectLifetimeScopeO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that "},{"type":"strong","inlineContent":[{"type":"text","text":"shares a single subscription to the underlying sequence"}]},{"type":"text","text":", and immediately upon subscription replays  elements in buffer."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/share(replay:scope:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/share(replay:scope:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/distinctUntilChanged()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"distinctUntilChanged()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"distinctUntilChanged"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains only distinct contiguous elements according to equality operator."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/distinctuntilchanged()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asMaybe()":{"role":"symbol","title":"asMaybe()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asMaybe"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Maybe","preciseIdentifier":"s:7RxSwift5Maybea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"asMaybe"},{"type":"text","text":" operator throws a "},{"type":"codeVoice","code":"RxError.moreThanOneElement"},{"type":"text","text":" "},{"type":"text","text":"if the source Observable does not emit at most one element before successfully completing."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asMaybe()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/asmaybe()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/window(timeSpan:count:scheduler:)":{"role":"symbol","title":"window(timeSpan:count:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"window"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeSpan"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a window that is completed when either it’s full or a given amount of time has elapsed."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/window(timeSpan:count:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/window(timespan:count:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/generate(initialState:condition:scheduler:iterate:)":{"role":"symbol","title":"generate(initialState:condition:scheduler:iterate:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"generate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"condition"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"iterate"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Generates an observable sequence by running a state-driven loop producing the sequence’s elements, using the specified scheduler"},{"type":"text","text":" "},{"type":"text","text":"to run the loop send out observer messages."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/generate(initialState:condition:scheduler:iterate:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/generate(initialstate:condition:scheduler:iterate:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O8"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/catchErrorJustReturn(_:)":{"role":"symbol","title":"catchErrorJustReturn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"catchErrorJustReturn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Continues an observable sequence that is terminated by an error with a single element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catchErrorJustReturn(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/catcherrorjustreturn(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/create(_:)":{"role":"symbol","title":"create(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"create"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"AnyObserver","preciseIdentifier":"s:7RxSwift11AnyObserverV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Disposable","preciseIdentifier":"s:7RxSwift10DisposableP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates an observable sequence from a specified subscribe method implementation."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/create(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/create(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/deferred(_:)":{"role":"symbol","title":"deferred(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"deferred"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/deferred(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/deferred(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:)":{"role":"symbol","title":"zip(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Collection"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/merge(_:)-2e4tp":{"role":"symbol","title":"merge(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Collection"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges elements from all observable sequences from collection into a single observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-2e4tp","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/merge(_:)-2e4tp"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(while:behavior:)":{"role":"symbol","title":"take(while:behavior:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"behavior"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TakeBehavior","preciseIdentifier":"s:7RxSwift12TakeBehaviorO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns elements from an observable sequence as long as a specified condition is true."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(while:behavior:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/take(while:behavior:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/switchLatest()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableConvertibleType"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"switchLatest()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"switchLatest"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Transforms an observable sequence of observable sequences into an observable sequence"},{"type":"text","text":" "},{"type":"text","text":"producing values only from the most recent observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/switchLatest()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/switchlatest()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/from(_:scheduler:)-6um30":{"role":"symbol","title":"from(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"from"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Sequence"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Sequence"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts a sequence to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(_:scheduler:)-6um30","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/from(_:scheduler:)-6um30"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/single()":{"role":"symbol","title":"single()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"single"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The single operator is similar to first, but throws a "},{"type":"codeVoice","code":"RxError.noElements"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RxError.moreThanOneElement"},{"type":"text","text":" "},{"type":"text","text":"if the source Observable does not emit exactly one element before successfully completing."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/single()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/single()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O8"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribe(onNext:onError:onCompleted:onDisposed:)":{"role":"symbol","title":"subscribe(onNext:onError:onCompleted:onDisposed:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"("},{"kind":"externalParam","text":"onNext"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onError"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onCompleted"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"onDisposed"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?) -> "},{"kind":"typeIdentifier","text":"Disposable","preciseIdentifier":"s:7RxSwift10DisposableP"}],"abstract":[{"type":"text","text":"Subscribes an element handler, an error handler, a completion handler and disposed handler to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(onNext:onError:onCompleted:onDisposed:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/subscribe(onnext:onerror:oncompleted:ondisposed:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asEffect(token:dispatcher:)":{"role":"symbol","title":"asEffect(token:dispatcher:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asEffect"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"H"},{"kind":"text","text":">("},{"kind":"externalParam","text":"token"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"H"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dispatcher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:10RxSwiftRex6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asEffect(token:dispatcher:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/aseffect(token:dispatcher:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/element(at:)":{"role":"symbol","title":"element(at:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"element"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a sequence emitting only element "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" emitted by an Observable"}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/element(at:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/element(at:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/distinctUntilChanged(_:)":{"role":"symbol","title":"distinctUntilChanged(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"distinctUntilChanged"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains only distinct contiguous elements according to the "},{"type":"codeVoice","code":"comparer"},{"type":"text","text":"."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/distinctuntilchanged(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(_:scheduler:)":{"role":"symbol","title":"take(_:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(_:scheduler:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/take(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/withUnretained(_:)":{"role":"symbol","title":"withUnretained(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnretained"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Object"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Provides an unretained, safe to use (i.e. not implicitly unwrapped), reference to an object along with the events emitted by the sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withUnretained(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/withunretained(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/withUnretained(_:resultSelector:)":{"role":"symbol","title":"withUnretained(_:resultSelector:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnretained"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Object"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Out"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Object"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Out"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Out"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Provides an unretained, safe to use (i.e. not implicitly unwrapped), reference to an object along with the events emitted by the sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/withUnretained(_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/withunretained(_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/merge(_:)-1gswg":{"role":"symbol","title":"merge(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">...) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges elements from all observable sequences into a single observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-1gswg","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/merge(_:)-1gswg"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/reduce(_:accumulator:mapResult:)":{"role":"symbol","title":"reduce(_:accumulator:mapResult:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"mapResult"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies an "},{"type":"codeVoice","code":"accumulator"},{"type":"text","text":" function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified "},{"type":"codeVoice","code":"seed"},{"type":"text","text":" value is used as the initial accumulator value."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/reduce(_:accumulator:mapResult:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/reduce(_:accumulator:mapresult:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/empty()":{"role":"symbol","title":"empty()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"empty"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an empty observable sequence, using the specified scheduler to send out the single "},{"type":"codeVoice","code":"Completed"},{"type":"text","text":" message."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/empty()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/empty()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/just(_:scheduler:)":{"role":"symbol","title":"just(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"just"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains a single element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/just(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/just(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/observe(on:)":{"role":"symbol","title":"observe(on:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observe"},{"kind":"text","text":"("},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps the source sequence in order to run its observer callbacks on the specified scheduler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/observe(on:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observe(on:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/takeUntil(_:predicate:)":{"role":"symbol","title":"takeUntil(_:predicate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"takeUntil"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"TakeBehavior","preciseIdentifier":"s:7RxSwift12TakeBehaviorO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"predicate"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns elements from an observable sequence until the specified condition is true."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeUntil(_:predicate:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/takeuntil(_:predicate:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/of(_:scheduler:)":{"role":"symbol","title":"of(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"of"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This method creates a new Observable instance with a variable number of elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/of(_:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/of(_:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/takeUntil(_:)":{"role":"symbol","title":"takeUntil(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"takeUntil"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the elements from the source observable sequence until the other observable sequence produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/takeUntil(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/takeuntil(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/decode(type:decoder:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Data"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"decode(type:decoder:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Item"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Decoder"},{"kind":"text","text":">("},{"kind":"externalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Item"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Item"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Attempt to decode the emitted "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" using a provided decoder."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/decode(type:decoder:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/decode(type:decoder:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/elementAt(_:)":{"role":"symbol","title":"elementAt(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"elementAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a sequence emitting only element "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" emitted by an Observable"}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/elementAt(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/elementat(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ifEmpty(default:)":{"role":"symbol","title":"ifEmpty(default:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifEmpty"},{"kind":"text","text":"("},{"kind":"externalParam","text":"default"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Emits elements from the source observable sequence, or a default element if the source observable sequence is empty."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ifEmpty(default:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/ifempty(default:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/distinctUntilChanged(at:)":{"role":"symbol","title":"distinctUntilChanged(at:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"distinctUntilChanged"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Property"},{"kind":"text","text":">("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains only contiguous elements with distinct values in the provided key path on each object."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(at:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/distinctuntilchanged(at:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/toArray()":{"role":"symbol","title":"toArray()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toArray"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Single","preciseIdentifier":"s:7RxSwift6Singlea"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Converts an Observable into a Single that emits the whole sequence as a single array and then terminates."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/toArray()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/toarray()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/flatMapFirst(_:)":{"role":"symbol","title":"flatMapFirst(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapFirst"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence."},{"type":"text","text":" "},{"type":"text","text":"If element is received while there is some projected observable sequence being merged it will simply be ignored."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapFirst(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/flatmapfirst(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/debug(_:trimOutput:file:line:function:)":{"role":"symbol","title":"debug(_:trimOutput:file:line:function:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"debug"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"trimOutput"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Prints received events for all observers on standard output."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/debug(_:trimOutput:file:line:function:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/debug(_:trimoutput:file:line:function:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skipWhile(_:)":{"role":"symbol","title":"skipWhile(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipWhile"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skipWhile(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/skipwhile(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/buffer(timeSpan:count:scheduler:)":{"role":"symbol","title":"buffer(timeSpan:count:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buffer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeSpan"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a buffer that’s sent out when either it’s full or a given amount of time has elapsed, using the specified scheduler to run timers."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/buffer(timeSpan:count:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/buffer(timespan:count:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(_:)":{"role":"symbol","title":"take(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a specified number of contiguous elements from the start of an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/take(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/asCompletable()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"asCompletable()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asCompletable"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Completable","preciseIdentifier":"s:7RxSwift11Completablea"}],"abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/asCompletable()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/ascompletable()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/publish()":{"role":"symbol","title":"publish()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"publish"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"ConnectableObservable","preciseIdentifier":"s:7RxSwift21ConnectableObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a connectable observable sequence that shares a single subscription to the underlying sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/publish()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/publish()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/observeOn(_:)":{"role":"symbol","title":"observeOn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observeOn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps the source sequence in order to run its observer callbacks on the specified scheduler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/observeOn(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/observeon(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/map(_:)":{"role":"symbol","title":"map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a new form."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/map(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/map(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skip(_:)":{"role":"symbol","title":"skip(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skip"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Bypasses a specified number of elements in an observable sequence and then returns the remaining elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/skip(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribe(_:)-7wehk":{"role":"symbol","title":"subscribe(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Event","preciseIdentifier":"s:7RxSwift5EventO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Disposable","preciseIdentifier":"s:7RxSwift10DisposableP"}],"abstract":[{"type":"text","text":"Subscribes an event handler to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(_:)-7wehk","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/subscribe(_:)-7wehk"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/throttle(_:latest:scheduler:)":{"role":"symbol","title":"throttle(_:latest:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"throttle"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"latest"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an Observable that emits the first and the latest item emitted by the source Observable during sequential time windows of a specified duration."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/throttle(_:latest:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/throttle(_:latest:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/distinctUntilChanged(_:comparer:)":{"role":"symbol","title":"distinctUntilChanged(_:comparer:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"distinctUntilChanged"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"K"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":", "},{"kind":"externalParam","text":"comparer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/distinctUntilChanged(_:comparer:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/distinctuntilchanged(_:comparer:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:)":{"role":"symbol","title":"combineLatest(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Collection"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Collection"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": (["},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/from(optional:scheduler:)":{"role":"symbol","title":"from(optional:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"from"},{"kind":"text","text":"("},{"kind":"externalParam","text":"optional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts a optional to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(optional:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/from(optional:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(until:)":{"role":"symbol","title":"take(until:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"until"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns the elements from the source observable sequence until the other observable sequence produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(until:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/take(until:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/from(_:scheduler:)-6mrsy":{"role":"symbol","title":"from(_:scheduler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"from"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts an array to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(_:scheduler:)-6mrsy","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/from(_:scheduler:)-6mrsy"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/merge(_:)-6m1ss":{"role":"symbol","title":"merge(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">]) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges elements from all observable sequences from array into a single observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(_:)-6m1ss","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/merge(_:)-6m1ss"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/retryWhen(_:)-28qao":{"role":"symbol","title":"retryWhen(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retryWhen"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TriggerObservable"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Error"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"TriggerObservable"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Repeats the source observable sequence on error when the notifier emits a next value."},{"type":"text","text":" "},{"type":"text","text":"If the source observable errors and the notifier completes, it will complete the source sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/retryWhen(_:)-28qao","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/rxswiftrex\/fireandforget\/retrywhen(_:)-28qao"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/sample(_:defaultValue:)":{"role":"symbol","title":"sample(_:defaultValue:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sample"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"defaultValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Samples the source observable sequence using a sampler observable sequence producing sampling ticks."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/sample(_:defaultValue:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/sample(_:defaultvalue:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/subscribe(on:)":{"role":"symbol","title":"subscribe(on:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"("},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ImmediateSchedulerType","preciseIdentifier":"s:7RxSwift22ImmediateSchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps the source sequence in order to run its subscription and unsubscription logic on the specified"},{"type":"text","text":" "},{"type":"text","text":"scheduler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/subscribe(on:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/subscribe(on:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/filter(_:)":{"role":"symbol","title":"filter(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Filters the elements of an observable sequence based on a predicate."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/filter(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/filter(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/merge(maxConcurrent:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableConvertibleType"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"merge(maxConcurrent:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxConcurrent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges elements from all inner observable sequences into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge(maxConcurrent:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/merge(maxconcurrent:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:resultSelector:)":{"role":"symbol","title":"zip(_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Collection"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": (["},{"kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"combineLatest(_:_:_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O8"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/error(_:)":{"role":"symbol","title":"error(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"error"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an observable sequence that terminates with an "},{"type":"codeVoice","code":"error"},{"type":"text","text":"."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/error(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/error(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:_:_:resultSelector:)":{"role":"symbol","title":"zip(_:_:_:_:_:_:_:_:resultSelector:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O8"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":", "},{"kind":"externalParam","text":"resultSelector"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:_:resultSelector:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:_:_:resultselector:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/from(optional:)":{"role":"symbol","title":"from(optional:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"from"},{"kind":"text","text":"("},{"kind":"externalParam","text":"optional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts a optional to an observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/from(optional:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/from(optional:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/zip(_:_:_:_:_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"zip(_:_:_:_:_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"zip"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O4"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O5"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O6"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O7"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O4"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O5"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O6"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O7"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/zip(_:_:_:_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/zip(_:_:_:_:_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/timeout(_:other:scheduler:)":{"role":"symbol","title":"timeout(_:other:scheduler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timeout"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"RxTimeInterval","preciseIdentifier":"s:7RxSwift0A12TimeIntervala"},{"kind":"text","text":", "},{"kind":"externalParam","text":"other"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerType","preciseIdentifier":"s:7RxSwift13SchedulerTypeP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies a timeout policy for each element in the observable sequence, using the specified scheduler to run timeout timers. If the next element isn’t received within the specified timeout duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/timeout(_:other:scheduler:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/timeout(_:other:scheduler:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/catch(_:)":{"role":"symbol","title":"catch(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`catch`"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Continues an observable sequence that is terminated by an error with the observable sequence produced by the handler."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/catch(_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/catch(_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/combineLatest(_:_:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Any"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"combineLatest(_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O2"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"O3"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<("},{"kind":"typeIdentifier","text":"O1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"O3"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")>"}],"abstract":[{"type":"text","text":"Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/combineLatest(_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/combinelatest(_:_:_:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/replayAll()":{"role":"symbol","title":"replayAll()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replayAll"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"ConnectableObservable","preciseIdentifier":"s:7RxSwift21ConnectableObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/replayAll()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/replayall()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/skip(while:)":{"role":"symbol","title":"skip(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skip"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/skip(while:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/skip(while:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/merge()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableConvertibleType"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"merge()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/merge()","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/merge()"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/take(until:behavior:)":{"role":"symbol","title":"take(until:behavior:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"("},{"kind":"externalParam","text":"until"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"behavior"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TakeBehavior","preciseIdentifier":"s:7RxSwift12TakeBehaviorO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns elements from an observable sequence until the specified condition is true."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/take(until:behavior:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/take(until:behavior:)"}}}