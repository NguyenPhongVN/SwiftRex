{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"seed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An observable sequence containing the accumulated values."}]}]},{"kind":"parameters","parameters":[{"name":"seed","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The initial accumulator value."}]}]},{"name":"accumulator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An accumulator function to be invoked on each element."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For aggregation behavior with no intermediate results, see "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/scan(into:accumulator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(into:accumulator:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value."}],"kind":"symbol","metadata":{"role":"symbol","title":"scan(into:accumulator:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:7RxSwift14ObservableTypePAAE4scan4into11accumulatorAA0C0Cyqd__Gqd___yqd__z_7ElementQztKctlF::SYNTHESIZED::s:10RxSwiftRex13FireAndForgetV","extendedModule":"RxSwift","modules":[{"name":"RxSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations"]]},"references":{"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableType-Implementations":{"role":"collectionGroup","title":"ObservableType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/scan(into:accumulator:)":{"role":"symbol","title":"scan(into:accumulator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"accumulator"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/scan(into:accumulator:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/scan(into:accumulator:)"},"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"}}}