{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"selector"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObservableConvertibleType","preciseIdentifier":"s:7RxSwift25ObservableConvertibleTypeP"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An observable sequence whose elements are the result of invoking the transform function on each element of source producing an"},{"type":"text","text":" "},{"type":"text","text":"Observable of Observable sequences and that at any point in time produces the elements of the most recent inner observable sequence that has been received."}]}]},{"kind":"parameters","parameters":[{"name":"selector","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A transform function to apply to each element."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is a combination of "},{"type":"codeVoice","code":"map"},{"type":"text","text":" + "},{"type":"codeVoice","code":"switchLatest"},{"type":"text","text":" operator"}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/flatmaplatest(_:)-3b9vg"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3b9vg","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a new sequence of observable sequences and then"},{"type":"text","text":" "},{"type":"text","text":"transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence."}],"kind":"symbol","metadata":{"role":"symbol","title":"flatMapLatest(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:7RxSwift14ObservableTypePAAE13flatMapLatestyAA0C0Cy7ElementQyd__Gqd__AGQzKcAA0c11ConvertibleD0Rd__lF::SYNTHESIZED::s:10RxSwiftRex13FireAndForgetV","extendedModule":"RxSwift","modules":[{"name":"RxSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations"]]},"references":{"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/flatMapLatest(_:)-3b9vg":{"role":"symbol","title":"flatMapLatest(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapLatest"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Projects each element of an observable sequence into a new sequence of observable sequences and then"},{"type":"text","text":" "},{"type":"text","text":"transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/flatMapLatest(_:)-3b9vg","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/flatmaplatest(_:)-3b9vg"},"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableType-Implementations":{"role":"collectionGroup","title":"ObservableType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"}}}