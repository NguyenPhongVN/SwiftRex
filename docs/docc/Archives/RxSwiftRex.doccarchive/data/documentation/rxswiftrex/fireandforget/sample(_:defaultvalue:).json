{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sample"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"sampler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"defaultValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"? = nil) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObservableType","preciseIdentifier":"s:7RxSwift14ObservableTypeP"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sampled observable sequence."}]}]},{"kind":"parameters","parameters":[{"name":"sampler","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sampling tick sequence."}]}]},{"name":"defaultValue","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a value to return if there are no new elements between sampler ticks"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"In case there were no new elements between sampler ticks, you may provide a default value to be emitted, instead"},{"type":"text","text":" "},{"type":"text","text":"to the resulting sequence otherwise no element is sent."}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/sample(_:defaultvalue:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/sample(_:defaultValue:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Samples the source observable sequence using a sampler observable sequence producing sampling ticks."}],"kind":"symbol","metadata":{"role":"symbol","title":"sample(_:defaultValue:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sample"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"defaultValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:7RxSwift14ObservableTypePAAE6sample_12defaultValueAA0C0Cy7ElementQzGqd___AISgtAaBRd__lF::SYNTHESIZED::s:10RxSwiftRex13FireAndForgetV","extendedModule":"RxSwift","modules":[{"name":"RxSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations"]]},"references":{"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/sample(_:defaultValue:)":{"role":"symbol","title":"sample(_:defaultValue:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sample"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"defaultValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Observable","preciseIdentifier":"s:7RxSwift10ObservableC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Samples the source observable sequence using a sampler observable sequence producing sampling ticks."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/sample(_:defaultValue:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/sample(_:defaultvalue:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/ObservableType-Implementations":{"role":"collectionGroup","title":"ObservableType Implementations","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/ObservableType-Implementations","kind":"article","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/observabletype-implementations"}}}