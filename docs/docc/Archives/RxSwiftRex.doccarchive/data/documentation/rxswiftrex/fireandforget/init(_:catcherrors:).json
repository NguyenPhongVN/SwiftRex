{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"upstream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObservableType","preciseIdentifier":"s:7RxSwift14ObservableTypeP"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/rxswiftrex\/fireandforget\/init(_:catcherrors:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:catchErrors:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Init a FireAndForget observable by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget can’t"},{"type":"text","text":" "},{"type":"text","text":"itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from the"},{"type":"text","text":" "},{"type":"text","text":"happy path."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"title":"init(_:catchErrors:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:10RxSwiftRex13FireAndForgetV_11catchErrorsACyxGqd___xSgs5Error_pctc0aB014ObservableTypeRd__lufc","modules":[{"name":"RxSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget"]]},"references":{"doc://RxSwiftRex/documentation/RxSwiftRex":{"role":"collection","title":"RxSwiftRex","abstract":[],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget/init(_:catchErrors:)":{"role":"symbol","title":"init(_:catchErrors:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Init a FireAndForget observable by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget can’t"},{"type":"text","text":" "},{"type":"text","text":"itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from the"},{"type":"text","text":" "},{"type":"text","text":"happy path."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget\/init(_:catchErrors:)","kind":"symbol","type":"topic","url":"\/documentation\/rxswiftrex\/fireandforget\/init(_:catcherrors:)"},"doc://RxSwiftRex/documentation/RxSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is an observable for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/RxSwiftRex\/documentation\/RxSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/rxswiftrex\/fireandforget"}}}