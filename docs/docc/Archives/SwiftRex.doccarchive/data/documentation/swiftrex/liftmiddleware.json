{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftMiddleware"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"PartMiddleware"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"PartMiddleware"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Internally you find the middleware responsible for handling events and actions for a sub-state ("},{"type":"codeVoice","code":"Part"},{"type":"text","text":"), while this outer class will be able to compose with global state ("},{"type":"codeVoice","code":"Whole"},{"type":"text","text":") in your "},{"type":"codeVoice","code":"Store"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should not be able to instantiate this class directly, instead, create a middleware for the sub-state and call "},{"type":"codeVoice","code":"Middleware.lift(_:)"},{"type":"text","text":", passing as parameter the keyPath from whole to part."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/liftmiddleware"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This is a container that lifts a sub-state middleware to a global state middleware."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftMiddleware"}],"title":"LiftMiddleware","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:8SwiftRex14LiftMiddlewareV","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"LiftMiddleware"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/handle(action:from:state:)","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/receiveContext(getState:output:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/InputActionType","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/OutputActionType","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/StateType"]},{"title":"Default Implementations","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/MiddlewareProtocol-Implementations"],"generated":true}],"references":{"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware":{"role":"symbol","title":"LiftMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftMiddleware"}],"abstract":[{"type":"text","text":"This is a container that lifts a sub-state middleware to a global state middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LiftMiddleware"}],"url":"\/documentation\/swiftrex\/liftmiddleware"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/OutputActionType":{"role":"symbol","title":"LiftMiddleware.OutputActionType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/OutputActionType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OutputActionType"}],"url":"\/documentation\/swiftrex\/liftmiddleware\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/handle(action:from:state:)":{"role":"symbol","title":"handle(action:from:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetState","preciseIdentifier":"s:8SwiftRex8GetStatea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IO","preciseIdentifier":"s:8SwiftRex2IOV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch"},{"type":"text","text":" "},{"type":"text","text":"additional actions. This is also a good place for analytics, tracking, logging and telemetry. Because the lift"},{"type":"text","text":" "},{"type":"text","text":"middleware is derived from a sub-state\/sub-action middleware, every global action received will be mapped into"},{"type":"text","text":" "},{"type":"text","text":"a sub-action, in a operation that can return nil ("},{"type":"codeVoice","code":"Optional<SubAction>"},{"type":"text","text":"). In case it’s nil, it means that the"},{"type":"text","text":" "},{"type":"text","text":"sub-action middleware doesn’t work with this type of action, so the lifted middleware will simply call the next"},{"type":"text","text":" "},{"type":"text","text":"middleware in the chain. On the other hand, if this operation returns a non-nil local action, this local action will"},{"type":"text","text":" "},{"type":"text","text":"be handled by the child middleware, which is also responsible for calling "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" in this case. When the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" "},{"type":"text","text":"type is also lifted, the context property will translate the global state into local state as expected every time"},{"type":"text","text":" "},{"type":"text","text":"you call "},{"type":"codeVoice","code":"context().getState()"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/handle(action:from:state:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/liftmiddleware\/handle(action:from:state:)"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/receiveContext(getState:output:)":{"role":"symbol","title":"receiveContext(getState:output:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receiveContext"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyActionHandler","preciseIdentifier":"s:8SwiftRex16AnyActionHandlerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Middleware setup. This function is deprecated and should never be used."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/receiveContext(getState:output:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/swiftrex\/liftmiddleware\/receivecontext(getstate:output:)"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/InputActionType":{"role":"symbol","title":"LiftMiddleware.InputActionType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/InputActionType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InputActionType"}],"url":"\/documentation\/swiftrex\/liftmiddleware\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/StateType":{"role":"symbol","title":"LiftMiddleware.StateType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/StateType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StateType"}],"url":"\/documentation\/swiftrex\/liftmiddleware\/statetype"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/MiddlewareProtocol-Implementations":{"role":"collectionGroup","title":"MiddlewareProtocol Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/MiddlewareProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/liftmiddleware\/middlewareprotocol-implementations"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"}}}