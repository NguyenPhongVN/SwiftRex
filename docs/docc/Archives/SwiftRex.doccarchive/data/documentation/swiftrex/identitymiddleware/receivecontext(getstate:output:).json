{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receiveContext"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyActionHandler","preciseIdentifier":"s:8SwiftRex16AnyActionHandlerV","text":"AnyActionHandler"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":">)"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"getState","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a closure that allows the middleware to read the current state at any point in time"}]}]},{"name":"output","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"an action handler that allows the middleware to dispatch new actions at any point in time"}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/identitymiddleware\/receivecontext(getstate:output:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware\/receiveContext(getState:output:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Middleware setup. This function is deprecated and should never be used."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receiveContext"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyActionHandler","preciseIdentifier":"s:8SwiftRex16AnyActionHandlerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":">)"}],"title":"receiveContext(getState:output:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:8SwiftRex18IdentityMiddlewareV14receiveContext8getState6outputyq0_yc_AA16AnyActionHandlerVyq_GtF","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/IdentityMiddleware/receiveContext(getState:output:)":{"role":"symbol","title":"receiveContext(getState:output:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receiveContext"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyActionHandler","preciseIdentifier":"s:8SwiftRex16AnyActionHandlerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Middleware setup. This function is deprecated and should never be used."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware\/receiveContext(getState:output:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/identitymiddleware\/receivecontext(getstate:output:)"},"doc://SwiftRex/documentation/SwiftRex/IdentityMiddleware":{"role":"symbol","title":"IdentityMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentityMiddleware"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IdentityMiddleware"},{"type":"text","text":" won’t do any operation, simply bypass actions through. It’s meant to provide identity axiom"},{"type":"text","text":" "},{"type":"text","text":"to middleware type to allow its conformance to monoid algebra. It will simply forward actions to the next middleware"},{"type":"text","text":" "},{"type":"text","text":"in the chain or to the reducers. It can be useful for Unit Tests or for some compositions."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentityMiddleware"}],"url":"\/documentation\/swiftrex\/identitymiddleware"},"doc://SwiftRex/documentation/SwiftRex/AnyActionHandler":{"role":"symbol","title":"AnyActionHandler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyActionHandler"}],"abstract":[{"type":"codeVoice","code":"ActionHandler"},{"type":"text","text":" defines a protocol for entities able to handle actions - defined by the associated type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"AnyActionHandler"},{"type":"text","text":" erases this protocol to a generic struct type."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyActionHandler"}],"url":"\/documentation\/swiftrex\/anyactionhandler"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"}}}