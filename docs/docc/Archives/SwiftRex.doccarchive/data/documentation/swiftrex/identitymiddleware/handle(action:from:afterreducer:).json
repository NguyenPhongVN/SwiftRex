{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"kind":"internalParam","text":"dispatcher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV","text":"ActionSource"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV","text":"AfterReducer"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/identitymiddleware\/handle(action:from:afterreducer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware\/handle(action:from:afterReducer:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"symbol","metadata":{"role":"symbol","title":"handle(action:from:afterReducer:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:8SwiftRex18IdentityMiddlewareV6handle6action4from12afterReduceryx_AA12ActionSourceVAA05AfterI0VztF","modules":[{"name":"SwiftRex"}],"platforms":[]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"\n                 Instead of relying on receiveContext, please use the getState from the new `handle(action:from:state:)` function,\n                 and when returning IO from the same handle(action) function use the output from the closure\n                 "}]}],"references":{"doc://SwiftRex/documentation/SwiftRex/AfterReducer":{"deprecated":true,"role":"symbol","title":"AfterReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AfterReducer"}],"abstract":[{"type":"text","text":"Wraps a closure that will be called after the Reducer pipeline has changed the state with the current action."},{"type":"text","text":" "},{"type":"text","text":"With this structure, a middleware can schedule some callback to be executed with the new state, and evidently access this state to check what’s"},{"type":"text","text":" "},{"type":"text","text":"different. This can be very useful for Middlewares that perform logging, monitoring or telemetry, so you can check the state before and after"},{"type":"text","text":" "},{"type":"text","text":"reducers’ execution, or how much time it took for the whole chain to be called (in case this middleware is the first in the chain, of course)."},{"type":"text","text":" "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is a monoid, that means it can be combined with another "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" to form a new one (that executes both operations in the"},{"type":"text","text":" "},{"type":"text","text":"reverse order) and an identity instance, that when combined with any other "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" changes nothing in the result, acting as a neutral"},{"type":"text","text":" "},{"type":"text","text":"element in composition. The identity of an "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is the static instance "},{"type":"codeVoice","code":"doNothing()"},{"type":"text","text":", that contains an empty closure for no-op."},{"type":"text","text":" "},{"type":"text","text":"The combination between two "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" instances occur in reverse order so the first middleware will have its “after reducer” closure executed"},{"type":"text","text":" "},{"type":"text","text":"last. This composition can be achieved by using the operator "},{"type":"codeVoice","code":"<>"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AfterReducer"}],"url":"\/documentation\/swiftrex\/afterreducer"},"doc://SwiftRex/documentation/SwiftRex/IdentityMiddleware/handle(action:from:afterReducer:)":{"role":"symbol","title":"handle(action:from:afterReducer:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware\/handle(action:from:afterReducer:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/swiftrex\/identitymiddleware\/handle(action:from:afterreducer:)"},"doc://SwiftRex/documentation/SwiftRex/IdentityMiddleware":{"role":"symbol","title":"IdentityMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentityMiddleware"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IdentityMiddleware"},{"type":"text","text":" won’t do any operation, simply bypass actions through. It’s meant to provide identity axiom"},{"type":"text","text":" "},{"type":"text","text":"to middleware type to allow its conformance to monoid algebra. It will simply forward actions to the next middleware"},{"type":"text","text":" "},{"type":"text","text":"in the chain or to the reducers. It can be useful for Unit Tests or for some compositions."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IdentityMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentityMiddleware"}],"url":"\/documentation\/swiftrex\/identitymiddleware"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/ActionSource":{"role":"symbol","title":"ActionSource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionSource"}],"abstract":[{"type":"text","text":"Representation of the entity responsible for creating and dispatching the action, including information useful for logging, debugging, analytics"},{"type":"text","text":" "},{"type":"text","text":"or monitoring. The action source will be implicitly created when "},{"type":"codeVoice","code":"ActionHandler.dispatch"},{"type":"text","text":" is called from a middleware, view or presenter, and"},{"type":"text","text":" "},{"type":"text","text":"it will contain the file, function and line from where the dispatch function was called. Additionally you can append extra information useful"},{"type":"text","text":" "},{"type":"text","text":"for debugging, as an optional String attached to the ActionSource."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionSource"}],"url":"\/documentation\/swiftrex\/actionsource"}}}