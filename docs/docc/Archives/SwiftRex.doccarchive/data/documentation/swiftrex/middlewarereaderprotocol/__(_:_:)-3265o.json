{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherMiddleware"},{"kind":"text","text":">("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"internalParam","text":"rhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV","text":"MiddlewareReader"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV","text":"MiddlewareReader"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV","text":"ComposedMiddleware"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a composed Middleware Reader that, once injected with dependencies, will produce a ComposedMiddleware that runs first the left and"},{"type":"text","text":" "},{"type":"text","text":"then the right middleware"}]}]},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"middleware reader that will generate a middleware which runs first"}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"middleware reader that will generate a middleware which runs last"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only requirements are that:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"both middleware readers must depend on the same Dependencies type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"both resulting middlewares should match their input action, output action and state types"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Therefore, you should lift them first before composing them. Luckily this is possible to be done with MiddlewareReader."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middlewarereaderprotocol\/__(_:_:)-3265o"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol\/__(_:_:)-3265o","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Compose two Middlewares that are not officially Semigroups and not necessarily the same Middleware type, into a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" that"},{"type":"text","text":" "},{"type":"text","text":"holds both before even materializing them into real instances."},{"type":"text","text":" "},{"type":"text","text":"As most Middlewares don’t need to return "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" when grouped together, and it’s perfectly reasonable to compose middlewares of different"},{"type":"text","text":" "},{"type":"text","text":"types, this option is more flexible than the Semigroup composition."}],"kind":"symbol","metadata":{"role":"symbol","title":"<>(_:_:)","roleHeading":"Operator","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherMiddleware"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">>"}],"symbolKind":"op","externalID":"s:8SwiftRex24MiddlewareReaderProtocolPAAE2lgoiyAA0cD0Vy12DependenciesQzAA08ComposedC0Vy15InputActionTypeQyd__06OutputjK0Qyd__05StateK0Qyd__GGx_AFyAHqd__GtAA0cE0Rd__0cK0_AKQZALRSAU_AMQZANRSAU_AOQZAPRSlFZ","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareReaderProtocol":{"role":"symbol","title":"MiddlewareReaderProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReaderProtocol"}],"abstract":[{"type":"text","text":"A protocol to generalize MiddlewareReader. Unless you look for some very special behaviour, you should use MiddlewareReader directly which"},{"type":"text","text":" "},{"type":"text","text":"provides everything needed for your Middleware dependency injection."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReaderProtocol"}],"url":"\/documentation\/swiftrex\/middlewarereaderprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader":{"role":"symbol","title":"MiddlewareReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReader"}],"abstract":[{"type":"text","text":"A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},{"type":"text","text":" "},{"type":"text","text":"a library, and in this library you don’t have the dependencies to inject just yet, because these dependencies are only present in the main target."},{"type":"text","text":" "},{"type":"text","text":"That way, instead of creating the middlewares (which would require all the dependencies), you can wrap their initializers in a MiddlewareReader."},{"type":"text","text":" "},{"type":"text","text":"The middleware reader is not a middleware, is a a factory (in OOP terms) from "},{"type":"codeVoice","code":"(Dependencies) -> MiddlewareType"},{"type":"text","text":" (in FP approach). The benefit"},{"type":"text","text":" "},{"type":"text","text":"of wrapping the middleware initializers in a MiddlewareReader is that, for all means, MiddlewareReaders can be composed as Middlewares, can be"},{"type":"text","text":" "},{"type":"text","text":"lifted as Middlewares, but all of this without in fact creating the Middlewares."},{"type":"text","text":" "},{"type":"text","text":"Your library can then expose a single MiddlewareReader as public, and you keep all its middlewares as internal classes. From the main target you"},{"type":"text","text":" "},{"type":"text","text":"compose this MiddlewareReader with other MiddlewareReaders coming from other libraries and from the main target itself. Somewhere where you create"},{"type":"text","text":" "},{"type":"text","text":"the Store, you finally inject the dependencies at once and you materialize all your middlewares at the same time."},{"type":"text","text":" "},{"type":"text","text":"Remember that “inject then compose” is the same as “compose then inject”, but while the former needs dependencies upfront, the latter is more"},{"type":"text","text":" "},{"type":"text","text":"flexible for being lazy."},{"type":"text","text":" "},{"type":"text","text":"For those familiar with Functional Programming, this is similar to Reader Monad, but as SwiftRex recommends dependencies only on Middlewares,"},{"type":"text","text":" "},{"type":"text","text":"this Reader works specifically with Middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReader"}],"url":"\/documentation\/swiftrex\/middlewarereader"},"doc://SwiftRex/documentation/SwiftRex/ComposedMiddleware":{"role":"symbol","title":"ComposedMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ComposedMiddleware"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" is a container of inner middlewares that are chained together in the order as they were composed. Whenever an "},{"type":"codeVoice","code":"EventProtocol"},{"type":"text","text":" or an "},{"type":"codeVoice","code":"ActionProtocol"},{"type":"text","text":" arrives to be handled by this "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", it will delegate to its internal chain of middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ComposedMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ComposedMiddleware"}],"url":"\/documentation\/swiftrex\/composedmiddleware"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReaderProtocol/__(_:_:)-3265o":{"role":"symbol","title":"<>(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherMiddleware"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherMiddleware"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Compose two Middlewares that are not officially Semigroups and not necessarily the same Middleware type, into a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" that"},{"type":"text","text":" "},{"type":"text","text":"holds both before even materializing them into real instances."},{"type":"text","text":" "},{"type":"text","text":"As most Middlewares don’t need to return "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" when grouped together, and it’s perfectly reasonable to compose middlewares of different"},{"type":"text","text":" "},{"type":"text","text":"types, this option is more flexible than the Semigroup composition."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol\/__(_:_:)-3265o","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/middlewarereaderprotocol\/__(_:_:)-3265o"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"}}}