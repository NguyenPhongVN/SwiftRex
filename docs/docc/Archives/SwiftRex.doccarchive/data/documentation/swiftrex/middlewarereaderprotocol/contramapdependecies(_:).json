{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapDependecies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"extractOnlyDependenciesNeededForThisMiddleware"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV","text":"MiddlewareReader"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a new "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" that will require the full "},{"type":"codeVoice","code":"World"},{"type":"text","text":" to create the "},{"type":"codeVoice","code":"MiddlewareType"},{"type":"text","text":". It can be combined with others that"},{"type":"text","text":" "},{"type":"text","text":"also depend on the same "},{"type":"codeVoice","code":"World"},{"type":"text","text":", so this is useful for composition as you eventually want to combine all sorts of middlewares that"},{"type":"text","text":" "},{"type":"text","text":"have different dependencies, so this is for finding a common ground for all of them."}]}]},{"kind":"parameters","parameters":[{"name":"extractOnlyDependenciesNeededForThisMiddleware","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"given all dependencies in the World of this app, that are needed for all"},{"type":"text","text":" "},{"type":"text","text":"middlewares and not only this one, extracts only what we need for this one"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once this "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" is lifted to depend on "},{"type":"codeVoice","code":"World"},{"type":"text","text":" (where world means all dependencies you need for all middlewares), it can be"},{"type":"text","text":" "},{"type":"text","text":"combined with others that also depend on the same "},{"type":"codeVoice","code":"World"},{"type":"text","text":", so this is useful for composition as you eventually want to combine all sorts of"},{"type":"text","text":" "},{"type":"text","text":"middlewares that have different dependencies, so this is for finding a common ground for all of them."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start with a local dependency "},{"type":"codeVoice","code":"X"},{"type":"text","text":" to calculate middleware "},{"type":"codeVoice","code":"A"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We give a way to extract depdendency "},{"type":"codeVoice","code":"X"},{"type":"text","text":" from world "},{"type":"codeVoice","code":"W"},{"type":"text","text":" ("},{"type":"codeVoice","code":"W"},{"type":"text","text":" -> "},{"type":"codeVoice","code":"X"},{"type":"text","text":"), where world means all dependencies you need for all middlewares"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our resulting "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" will accept dependency "},{"type":"codeVoice","code":"W"},{"type":"text","text":" to calculate middleware "},{"type":"codeVoice","code":"A"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Middleware type hasn’t changed at all"}]}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middlewarereaderprotocol\/contramapdependecies(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol\/contramapDependecies(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Maps the "},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":" element, which is the input environment of the calculation for a particular middleware, using a contravariant"},{"type":"text","text":" "},{"type":"text","text":"function that will allow to lift this reader into a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" compatible with a more global dependencies structure."}],"kind":"symbol","metadata":{"role":"symbol","title":"contramapDependecies(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapDependecies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:8SwiftRex24MiddlewareReaderProtocolPAAE20contramapDependeciesyAA0cD0Vyqd__0C4TypeQzG12DependenciesQzqd__clF","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareReaderProtocol/contramapDependecies(_:)":{"role":"symbol","title":"contramapDependecies(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapDependecies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Maps the "},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":" element, which is the input environment of the calculation for a particular middleware, using a contravariant"},{"type":"text","text":" "},{"type":"text","text":"function that will allow to lift this reader into a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" compatible with a more global dependencies structure."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol\/contramapDependecies(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/middlewarereaderprotocol\/contramapdependecies(_:)"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader":{"role":"symbol","title":"MiddlewareReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReader"}],"abstract":[{"type":"text","text":"A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},{"type":"text","text":" "},{"type":"text","text":"a library, and in this library you don’t have the dependencies to inject just yet, because these dependencies are only present in the main target."},{"type":"text","text":" "},{"type":"text","text":"That way, instead of creating the middlewares (which would require all the dependencies), you can wrap their initializers in a MiddlewareReader."},{"type":"text","text":" "},{"type":"text","text":"The middleware reader is not a middleware, is a a factory (in OOP terms) from "},{"type":"codeVoice","code":"(Dependencies) -> MiddlewareType"},{"type":"text","text":" (in FP approach). The benefit"},{"type":"text","text":" "},{"type":"text","text":"of wrapping the middleware initializers in a MiddlewareReader is that, for all means, MiddlewareReaders can be composed as Middlewares, can be"},{"type":"text","text":" "},{"type":"text","text":"lifted as Middlewares, but all of this without in fact creating the Middlewares."},{"type":"text","text":" "},{"type":"text","text":"Your library can then expose a single MiddlewareReader as public, and you keep all its middlewares as internal classes. From the main target you"},{"type":"text","text":" "},{"type":"text","text":"compose this MiddlewareReader with other MiddlewareReaders coming from other libraries and from the main target itself. Somewhere where you create"},{"type":"text","text":" "},{"type":"text","text":"the Store, you finally inject the dependencies at once and you materialize all your middlewares at the same time."},{"type":"text","text":" "},{"type":"text","text":"Remember that “inject then compose” is the same as “compose then inject”, but while the former needs dependencies upfront, the latter is more"},{"type":"text","text":" "},{"type":"text","text":"flexible for being lazy."},{"type":"text","text":" "},{"type":"text","text":"For those familiar with Functional Programming, this is similar to Reader Monad, but as SwiftRex recommends dependencies only on Middlewares,"},{"type":"text","text":" "},{"type":"text","text":"this Reader works specifically with Middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReader"}],"url":"\/documentation\/swiftrex\/middlewarereader"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReaderProtocol":{"role":"symbol","title":"MiddlewareReaderProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReaderProtocol"}],"abstract":[{"type":"text","text":"A protocol to generalize MiddlewareReader. Unless you look for some very special behaviour, you should use MiddlewareReader directly which"},{"type":"text","text":" "},{"type":"text","text":"provides everything needed for your Middleware dependency injection."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReaderProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReaderProtocol"}],"url":"\/documentation\/swiftrex\/middlewarereaderprotocol"}}}