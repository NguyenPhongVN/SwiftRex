{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dimap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">("},{"kind":"externalParam","text":"transformMiddleware"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"externalParam","text":"extractOnlyDependenciesNeededForThisMiddleware"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV","text":"MiddlewareReader"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a new "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" that will require the full "},{"type":"codeVoice","code":"World"},{"type":"text","text":" to create not the original MiddlewareType any more, but a"},{"type":"text","text":" "},{"type":"text","text":"NewMiddleware mapped from the original. It can be combined with others that also depend on the same "},{"type":"codeVoice","code":"World"},{"type":"text","text":", so this is useful for"},{"type":"text","text":" "},{"type":"text","text":"composition as you eventually want to combine all sorts of middlewares that have different dependencies, so this is for finding a"},{"type":"text","text":" "},{"type":"text","text":"common ground for all of them."}]}]},{"kind":"parameters","parameters":[{"name":"transformMiddleware","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"function that transforms original produced Middleware into a new one, once the dependencies are injected"}]}]},{"name":"extractOnlyDependenciesNeededForThisMiddleware","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"given all dependencies in the World of this app, that are needed for all"},{"type":"text","text":" "},{"type":"text","text":"middlewares and not only this one, extracts only what we need for this one"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also maps the "},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":" element, which is the input environment of the calculation for a particular middleware, using a contravariant"},{"type":"text","text":" "},{"type":"text","text":"function that will allow to lift this reader into a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" compatible with a more global dependencies structure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once this "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" is lifted to depend on "},{"type":"codeVoice","code":"World"},{"type":"text","text":" (where world means all dependencies you need for all middlewares), it can be"},{"type":"text","text":" "},{"type":"text","text":"combined with others that also depend on the same "},{"type":"codeVoice","code":"World"},{"type":"text","text":", so this is useful for composition as you eventually want to combine all sorts of"},{"type":"text","text":" "},{"type":"text","text":"middlewares that have different dependencies, so this is for finding a common ground for all of them."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start with a dependency "},{"type":"codeVoice","code":"X"},{"type":"text","text":" to calculate middleware "},{"type":"codeVoice","code":"A"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We give a way for going from middleware "},{"type":"codeVoice","code":"A"},{"type":"text","text":" to middleware "},{"type":"codeVoice","code":"B"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We also give a way to extract depdendency "},{"type":"codeVoice","code":"X"},{"type":"text","text":" from world "},{"type":"codeVoice","code":"W"},{"type":"text","text":" ("},{"type":"codeVoice","code":"W"},{"type":"text","text":" -> "},{"type":"codeVoice","code":"X"},{"type":"text","text":"), where world means all dependencies you need for all middlewares"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our resulting mapped "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" will accept dependency "},{"type":"codeVoice","code":"@"},{"type":"text","text":" to calculate middleware "},{"type":"codeVoice","code":"B"}]}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middlewarereader\/dimap(transformmiddleware:extractonlydependenciesneededforthismiddleware:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Maps the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" element that will eventually be produced upon dependency injection, and derives into a new "},{"type":"codeVoice","code":"Middleware"}],"kind":"symbol","metadata":{"role":"symbol","title":"dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dimap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">("},{"kind":"externalParam","text":"transformMiddleware"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"externalParam","text":"extractOnlyDependenciesNeededForThisMiddleware"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:8SwiftRex24MiddlewareReaderProtocolPAAE5dimap09transformC0036extractOnlyDependenciesNeededForThisC0AA0cD0Vyqd_0_qd__Gqd__0C4TypeQzc_0J0Qzqd_0_ctAA0cE0Rd__r0_lF::SYNTHESIZED::s:8SwiftRex16MiddlewareReaderV","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations"]]},"references":{"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/MiddlewareReaderProtocol-Implementations":{"role":"collectionGroup","title":"MiddlewareReaderProtocol Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/middlewarereaderprotocol-implementations"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader":{"role":"symbol","title":"MiddlewareReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReader"}],"abstract":[{"type":"text","text":"A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},{"type":"text","text":" "},{"type":"text","text":"a library, and in this library you don’t have the dependencies to inject just yet, because these dependencies are only present in the main target."},{"type":"text","text":" "},{"type":"text","text":"That way, instead of creating the middlewares (which would require all the dependencies), you can wrap their initializers in a MiddlewareReader."},{"type":"text","text":" "},{"type":"text","text":"The middleware reader is not a middleware, is a a factory (in OOP terms) from "},{"type":"codeVoice","code":"(Dependencies) -> MiddlewareType"},{"type":"text","text":" (in FP approach). The benefit"},{"type":"text","text":" "},{"type":"text","text":"of wrapping the middleware initializers in a MiddlewareReader is that, for all means, MiddlewareReaders can be composed as Middlewares, can be"},{"type":"text","text":" "},{"type":"text","text":"lifted as Middlewares, but all of this without in fact creating the Middlewares."},{"type":"text","text":" "},{"type":"text","text":"Your library can then expose a single MiddlewareReader as public, and you keep all its middlewares as internal classes. From the main target you"},{"type":"text","text":" "},{"type":"text","text":"compose this MiddlewareReader with other MiddlewareReaders coming from other libraries and from the main target itself. Somewhere where you create"},{"type":"text","text":" "},{"type":"text","text":"the Store, you finally inject the dependencies at once and you materialize all your middlewares at the same time."},{"type":"text","text":" "},{"type":"text","text":"Remember that “inject then compose” is the same as “compose then inject”, but while the former needs dependencies upfront, the latter is more"},{"type":"text","text":" "},{"type":"text","text":"flexible for being lazy."},{"type":"text","text":" "},{"type":"text","text":"For those familiar with Functional Programming, this is similar to Reader Monad, but as SwiftRex recommends dependencies only on Middlewares,"},{"type":"text","text":" "},{"type":"text","text":"this Reader works specifically with Middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReader"}],"url":"\/documentation\/swiftrex\/middlewarereader"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)":{"role":"symbol","title":"dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dimap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"World"},{"kind":"text","text":">("},{"kind":"externalParam","text":"transformMiddleware"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":", "},{"kind":"externalParam","text":"extractOnlyDependenciesNeededForThisMiddleware"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"World"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewMiddleware"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Maps the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" element that will eventually be produced upon dependency injection, and derives into a new "},{"type":"codeVoice","code":"Middleware"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/dimap(transformmiddleware:extractonlydependenciesneededforthismiddleware:)"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"}}}