{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalDependencies"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dependencies"},{"kind":"text","text":" "},{"kind":"internalParam","text":"dependenciesMap"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV","text":"MiddlewareReader"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" that works on global types, so it can be composed with other MiddlewareReaders matching same global types"},{"type":"text","text":" "},{"type":"text","text":"even before injecting the dependencies."}]}]},{"kind":"parameters","parameters":[{"name":"dependenciesMap","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"this middleware may depend on only a small amount of dependencies, not all the dependencies in your app. Given that"},{"type":"text","text":" "},{"type":"text","text":"there’s a "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" struct holding the whole world of dependencies, this function can pick only the"},{"type":"text","text":" "},{"type":"text","text":"dependencies needed for this middleware. This is usually implemented like:"},{"type":"text","text":" "},{"type":"codeVoice","code":"dependenciesMap: { (world: World) in return (urlSession: world.urlSession, decoder: world.jsonDecoder) }"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Input Actions for the Middleware"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Output Actions from the Middleware"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Input State for the Middleware"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Input Dependencies for the Middleware, through its MiddlewareReader dependency injection."}]}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middlewarereader\/lift(dependencies:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/lift(dependencies:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common"},{"type":"text","text":" "},{"type":"text","text":"ground, you are able to compose them. These 4 parameters are:"}],"kind":"symbol","metadata":{"role":"symbol","title":"lift(dependencies:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalDependencies"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dependencies"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12dependenciesAA0cD0Vyqd__0C4TypeQzG12DependenciesQzqd__c_tlF::SYNTHESIZED::s:8SwiftRex16MiddlewareReaderV","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations"]]},"references":{"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader":{"role":"symbol","title":"MiddlewareReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReader"}],"abstract":[{"type":"text","text":"A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},{"type":"text","text":" "},{"type":"text","text":"a library, and in this library you don’t have the dependencies to inject just yet, because these dependencies are only present in the main target."},{"type":"text","text":" "},{"type":"text","text":"That way, instead of creating the middlewares (which would require all the dependencies), you can wrap their initializers in a MiddlewareReader."},{"type":"text","text":" "},{"type":"text","text":"The middleware reader is not a middleware, is a a factory (in OOP terms) from "},{"type":"codeVoice","code":"(Dependencies) -> MiddlewareType"},{"type":"text","text":" (in FP approach). The benefit"},{"type":"text","text":" "},{"type":"text","text":"of wrapping the middleware initializers in a MiddlewareReader is that, for all means, MiddlewareReaders can be composed as Middlewares, can be"},{"type":"text","text":" "},{"type":"text","text":"lifted as Middlewares, but all of this without in fact creating the Middlewares."},{"type":"text","text":" "},{"type":"text","text":"Your library can then expose a single MiddlewareReader as public, and you keep all its middlewares as internal classes. From the main target you"},{"type":"text","text":" "},{"type":"text","text":"compose this MiddlewareReader with other MiddlewareReaders coming from other libraries and from the main target itself. Somewhere where you create"},{"type":"text","text":" "},{"type":"text","text":"the Store, you finally inject the dependencies at once and you materialize all your middlewares at the same time."},{"type":"text","text":" "},{"type":"text","text":"Remember that “inject then compose” is the same as “compose then inject”, but while the former needs dependencies upfront, the latter is more"},{"type":"text","text":" "},{"type":"text","text":"flexible for being lazy."},{"type":"text","text":" "},{"type":"text","text":"For those familiar with Functional Programming, this is similar to Reader Monad, but as SwiftRex recommends dependencies only on Middlewares,"},{"type":"text","text":" "},{"type":"text","text":"this Reader works specifically with Middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReader"}],"url":"\/documentation\/swiftrex\/middlewarereader"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/lift(dependencies:)":{"role":"symbol","title":"lift(dependencies:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalDependencies"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dependencies"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Dependencies"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"MiddlewareReader","preciseIdentifier":"s:8SwiftRex16MiddlewareReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalDependencies"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common"},{"type":"text","text":" "},{"type":"text","text":"ground, you are able to compose them. These 4 parameters are:"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/lift(dependencies:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/lift(dependencies:)"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/MiddlewareReaderProtocol-Implementations":{"role":"collectionGroup","title":"MiddlewareReaderProtocol Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/middlewarereaderprotocol-implementations"}}}