{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pure"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" that wraps the given Middleware until "},{"type":"codeVoice","code":"inject"},{"type":"text","text":" is called."}]}]},{"kind":"parameters","parameters":[{"name":"value","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The middleware that will be eventually returned when “inject” is called. This is a autoclosure so it can be lazily"},{"type":"text","text":" "},{"type":"text","text":"evaluated."}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middlewarereader\/pure(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/pure(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Wraps a pure function in a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" container just for the sake of composition. Nothing is actually needed for the calculation and"},{"type":"text","text":" "},{"type":"text","text":"injected dependency will be ignored. This is useful for lifting a "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":", so you can compose with other"},{"type":"text","text":" "},{"type":"text","text":"MiddlewareReaders that actually depend on dependencies."}],"kind":"symbol","metadata":{"role":"symbol","title":"pure(_:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pure"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method","externalID":"s:8SwiftRex24MiddlewareReaderProtocolPAAE4pureyx0C4TypeQzFZ::SYNTHESIZED::s:8SwiftRex16MiddlewareReaderV","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader":{"role":"symbol","title":"MiddlewareReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareReader"}],"abstract":[{"type":"text","text":"A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},{"type":"text","text":" "},{"type":"text","text":"a library, and in this library you don’t have the dependencies to inject just yet, because these dependencies are only present in the main target."},{"type":"text","text":" "},{"type":"text","text":"That way, instead of creating the middlewares (which would require all the dependencies), you can wrap their initializers in a MiddlewareReader."},{"type":"text","text":" "},{"type":"text","text":"The middleware reader is not a middleware, is a a factory (in OOP terms) from "},{"type":"codeVoice","code":"(Dependencies) -> MiddlewareType"},{"type":"text","text":" (in FP approach). The benefit"},{"type":"text","text":" "},{"type":"text","text":"of wrapping the middleware initializers in a MiddlewareReader is that, for all means, MiddlewareReaders can be composed as Middlewares, can be"},{"type":"text","text":" "},{"type":"text","text":"lifted as Middlewares, but all of this without in fact creating the Middlewares."},{"type":"text","text":" "},{"type":"text","text":"Your library can then expose a single MiddlewareReader as public, and you keep all its middlewares as internal classes. From the main target you"},{"type":"text","text":" "},{"type":"text","text":"compose this MiddlewareReader with other MiddlewareReaders coming from other libraries and from the main target itself. Somewhere where you create"},{"type":"text","text":" "},{"type":"text","text":"the Store, you finally inject the dependencies at once and you materialize all your middlewares at the same time."},{"type":"text","text":" "},{"type":"text","text":"Remember that “inject then compose” is the same as “compose then inject”, but while the former needs dependencies upfront, the latter is more"},{"type":"text","text":" "},{"type":"text","text":"flexible for being lazy."},{"type":"text","text":" "},{"type":"text","text":"For those familiar with Functional Programming, this is similar to Reader Monad, but as SwiftRex recommends dependencies only on Middlewares,"},{"type":"text","text":" "},{"type":"text","text":"this Reader works specifically with Middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareReader"}],"url":"\/documentation\/swiftrex\/middlewarereader"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/MiddlewareReaderProtocol-Implementations":{"role":"collectionGroup","title":"MiddlewareReaderProtocol Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/MiddlewareReaderProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/middlewarereaderprotocol-implementations"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareReader/pure(_:)":{"role":"symbol","title":"pure(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pure"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Wraps a pure function in a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":" container just for the sake of composition. Nothing is actually needed for the calculation and"},{"type":"text","text":" "},{"type":"text","text":"injected dependency will be ignored. This is useful for lifting a "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"MiddlewareReader"},{"type":"text","text":", so you can compose with other"},{"type":"text","text":" "},{"type":"text","text":"MiddlewareReaders that actually depend on dependencies."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareReader\/pure(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/middlewarereader\/pure(_:)"}}}