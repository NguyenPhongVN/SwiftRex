{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreBase"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A store should have a single input and a single output, being the input the method to handle actions dispatched by the"},{"type":"text","text":" "},{"type":"text","text":"counterparts, and the output the state that can be observed by them. For that reason, a "},{"type":"codeVoice","code":"StoreType"},{"type":"text","text":" protocol is nothing"},{"type":"text","text":" "},{"type":"text","text":"but a composition of two other protocols: "},{"type":"codeVoice","code":"ActionHandler"},{"type":"text","text":" and "},{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"as "},{"type":"codeVoice","code":"ActionHandler"},{"type":"text","text":", which represents the store input, it’s gonna be able to receive and distribute action of a"},{"type":"text","text":" "},{"type":"text","text":"generic type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":". Being an action handler means that an "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":" or SwiftUI "},{"type":"codeVoice","code":"View"},{"type":"text","text":" can dispatch"},{"type":"text","text":" "},{"type":"text","text":"actions to it, such as "},{"type":"codeVoice","code":".saveButtonTapped"},{"type":"text","text":", "},{"type":"codeVoice","code":".didScrollToPosition(y)"},{"type":"text","text":", "},{"type":"codeVoice","code":".viewDidLoad"},{"type":"text","text":" or "},{"type":"codeVoice","code":".queryTextFieldChanged(text)"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"as "},{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":", which represents the store output, it’s gonna be able to offer to the system a way to subscribe"},{"type":"text","text":" "},{"type":"text","text":"for updates on State. Being a state provider basically means that a store has a "},{"type":"codeVoice","code":"statePublisher"},{"type":"text","text":" that is either a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Observable<StateType>"},{"type":"text","text":", "},{"type":"codeVoice","code":"SignalProducer<StateType, Never>"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Publisher<StateType, Never>"},{"type":"text","text":" depending on the reactive"},{"type":"text","text":" "},{"type":"text","text":"framework of your choice, so an "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":" can subscribe to state changes and react to them, or a SwiftUI View"},{"type":"text","text":" "},{"type":"text","text":"can use it as a "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type of store will glue all the parts together and its responsibility is owning the main state, which means the"},{"type":"text","text":" "},{"type":"text","text":"only source-of-truth an app can have, besides of coordinating the sequence of operations that will be triggered once a"},{"type":"text","text":" "},{"type":"text","text":"new action arrives from views or middlewares. It’s highly recommended that your app should have only a single instance"},{"type":"text","text":" "},{"type":"text","text":"of this class and, directly or indirectly, all the other parts of your app will react to the state notifications sent"},{"type":"text","text":" "},{"type":"text","text":"by this instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That means that other types of store can act as a proxy to this one, but none of them should hold any state. For more"},{"type":"text","text":" "},{"type":"text","text":"information on that please check "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/swiftrex.github.io\/SwiftRex\/markdown\/img\/StoreProjectionDiagram.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can think of Store as a very heavy “Model” layer, completely detached from the Views, Controllers, Presenters etc.,"},{"type":"text","text":" "},{"type":"text","text":"and where all the business logic stands. At a first sight it may look like transferring the “Massive” problem from a"},{"type":"text","text":" "},{"type":"text","text":"layer to another, but the store actually won’t have any of this logic, only coordinate the multiple entities that do"},{"type":"text","text":" "},{"type":"text","text":"that. These entities are "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":", and you can learn more about them in their own documentation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ReduxStoreBase"},{"type":"text","text":" has a pipeline of middlewares and reducers. Upon an action arrival, which first is bottlenecked"},{"type":"text","text":" "},{"type":"text","text":"into a serial queue, every middleware will have the chance to handle the action, and trigger side-effects in response."},{"type":"text","text":" "},{"type":"text","text":"These middlewares also have read-only access to the state at any point, and can dispatch new actions to the beginning"},{"type":"text","text":" "},{"type":"text","text":"of the process at any point. Once all middlewares were informed about the action, now your reducers will have the"},{"type":"text","text":" "},{"type":"text","text":"chance to act. The reducers can’t trigger side-effects or do any async operation, all they do is calculating a new"},{"type":"text","text":" "},{"type":"text","text":"version of the app state from the old version of the app state plus the action. One-by-one the reducers will shape the"},{"type":"text","text":" "},{"type":"text","text":"new state, accumulatively. When they are done, the store publishes the final state as the new one, and notifies all the"},{"type":"text","text":" "},{"type":"text","text":"subscribers."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/swiftrex.github.io\/SwiftRex\/markdown\/img\/StoreInternals.png"}]},{"type":"codeListing","syntax":null,"code":["                  ┌────────────────────────────────────────┐","                  │                                        │","                  │    SwiftUI View \/ UIViewController     │","                  │                                        │","                  └────┬───────────────────────────────────┘","                       │                            ▲","                       │                            │","                       │ action        notification","           ┌─────────┐ │                            │","           │         ▼ │                       ─ ─ ─ ─ ─ ─","           │      ┏━━━━│━━━━━━━━━━━━━━━━━━━━━━┫   State   ┣┓","   new actions    ┃    │            Store       Publisher  ┃░"," from middleware  ┃    ▼                      └ ─ ─ ┬ ─ ─ ┘┃░","           │      ┃ ┌───────────────────┐                  ┃░","           │      ┃ │    Middlewares    │           │      ┃░","           └────────┤┌───┐  ┌───┐  ┌───┐│                  ┃░","                  ┃ ││ 1 │─▶│ 2 │─▶│ 3 ││◀─         │      ┃░","                  ┃ │└───┘  └───┘  └───┘│  │               ┃░","                  ┃ └────────────────┬──┘      ┌────┴────┐ ┃░","                  ┃                  │     │   │         │ ┃░","                  ┃    ┌─────────────┘      ─ ─│  State  │ ┃░","                  ┃    │ ┌─────────────────────│         │ ┃░","                  ┃    ▼ ▼                     └────▲────┘ ┃░","                  ┃ ┌───────────────────┐           ║      ┃░","                  ┃ │     Reducers      │           ║      ┃░","                  ┃ │┌───┐  ┌───┐  ┌───┐│           ║      ┃░","                  ┃ ││ 1 │─▶│ 2 │─▶│ 3 │╠═══════════╝      ┃░","                  ┃ │└───┘  └───┘  └───┘│    state         ┃░","                  ┃ └───────────────────┘   mutation       ┃░","                  ┃                                        ┃░","                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛░","                   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By using this architecture, your model gets completely detached from the "},{"type":"codeVoice","code":"UIKit"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":" world. And your UI gets"},{"type":"text","text":" "},{"type":"text","text":"completely independent from side-effects, state mutations, threading, ownership, logic, logs, analytics and everything"},{"type":"text","text":" "},{"type":"text","text":"other than UI. No more dependency injection for your views, they only need to know about the store (the main one or"},{"type":"text","text":" "},{"type":"text","text":"a derived view store)."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/reduxstorebase"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol","doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider","doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"🏪 "},{"type":"codeVoice","code":"ReduxStoreBase"},{"type":"text","text":" is a base class that can be used to create the main store of an app, using the redux pattern."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreBase"}],"title":"ReduxStoreBase","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:8SwiftRex14ReduxStoreBaseC","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"ReduxStoreBase"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/init(subject:reducer:middleware:emitsValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/pipeline","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/statePublisher"]},{"title":"Default Implementations","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/StateProvider-Implementations","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/ActionHandler-Implementations","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/StoreType-Implementations"],"generated":true}],"references":{"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/StateProvider-Implementations":{"role":"collectionGroup","title":"StateProvider Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/StateProvider-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/stateprovider-implementations"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreProtocol":{"role":"symbol","title":"ReduxStoreProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreProtocol"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReduxStoreProtocol"}],"url":"\/documentation\/swiftrex\/reduxstoreprotocol"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/statePublisher":{"role":"symbol","title":"statePublisher","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"statePublisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"State publisher which can be subscribed in order to be notified on every mutation"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/statePublisher","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/statepublisher"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/ActionHandler-Implementations":{"role":"collectionGroup","title":"ActionHandler Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/ActionHandler-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/actionhandler-implementations"},"doc://SwiftRex/documentation/SwiftRex/ActionHandler":{"role":"symbol","title":"ActionHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionHandler"}],"abstract":[{"type":"codeVoice","code":"ActionHandler"},{"type":"text","text":" defines a protocol for entities able to handle actions - defined by the associated type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionHandler"}],"url":"\/documentation\/swiftrex\/actionhandler"},"doc://SwiftRex/documentation/SwiftRex/StoreProjection":{"role":"symbol","title":"StoreProjection","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreProjection"}],"abstract":[{"type":"text","text":"An app should have a single real Store, holding a single source-of-truth. However, we can “derive” this store to small subsets, called store"},{"type":"text","text":" "},{"type":"text","text":"projections, that will handle either a smaller part of the state or action tree, or even a completely different type of actions and states as"},{"type":"text","text":" "},{"type":"text","text":"long as we can map back-and-forth to the original store types. It won’t store anything, only project the original store. For example, a View can"},{"type":"text","text":" "},{"type":"text","text":"define a completely custom View State and View Action, and we can create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":" that works on these types, as long as it’s backed"},{"type":"text","text":" "},{"type":"text","text":"by a real store which State and Action types can be mapped somehow to the View State and View Action types. The Store Projection will take care"},{"type":"text","text":" "},{"type":"text","text":"of translating these entities."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreProjection"}],"url":"\/documentation\/swiftrex\/storeprojection"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/pipeline":{"role":"symbol","title":"pipeline","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"pipeline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ReduxPipelineWrapper","preciseIdentifier":"s:8SwiftRex20ReduxPipelineWrapperC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyMiddleware","preciseIdentifier":"s:8SwiftRex13AnyMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Pipeline to execute upon action arrival, containing all middlewares and reducers"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/pipeline","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/pipeline"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/StoreType-Implementations":{"role":"collectionGroup","title":"StoreType Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/StoreType-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/storetype-implementations"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/StateProvider":{"role":"symbol","title":"StateProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateProvider"}],"abstract":[{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":" defines a protocol for entities able to offer state publishers (Combine Publisher, RxSwift Observable,"},{"type":"text","text":" "},{"type":"text","text":"ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this"},{"type":"text","text":" "},{"type":"text","text":"container. Usually a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from"},{"type":"text","text":" "},{"type":"text","text":"the global source-of-truth."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StateProvider"}],"url":"\/documentation\/swiftrex\/stateprovider"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/init(subject:reducer:middleware:emitsValue:)":{"role":"symbol","title":"init(subject:reducer:middleware:emitsValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subject"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailableReplayLastSubjectType","preciseIdentifier":"s:8SwiftRex31UnfailableReplayLastSubjectTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:8SwiftRex7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"middleware"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":", "},{"kind":"externalParam","text":"emitsValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Required initializer that configures the action handler pipeline and the state storage"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/init(subject:reducer:middleware:emitsValue:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/init(subject:reducer:middleware:emitsvalue:)"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase":{"role":"symbol","title":"ReduxStoreBase","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreBase"}],"abstract":[{"type":"text","text":"🏪 "},{"type":"codeVoice","code":"ReduxStoreBase"},{"type":"text","text":" is a base class that can be used to create the main store of an app, using the redux pattern."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReduxStoreBase"}],"url":"\/documentation\/swiftrex\/reduxstorebase"}}}