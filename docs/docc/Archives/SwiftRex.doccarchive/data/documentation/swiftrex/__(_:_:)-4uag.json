{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"M2"},{"kind":"text","text":">("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":", "},{"kind":"internalParam","text":"rhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV","text":"ComposedMiddleware"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" that calls the "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" methods before the "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" ones. If "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" is already a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", we will return the same instance after mutating it to have the "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" in the end of its chain."}]}]},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A flat middleware or a composed middleware, in case it’s a flat one, this operation will create a new "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" and return it, otherwise it will append the "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" to this composed lhs one mutating it and also returning it."}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A flat middleware to be appended to the end of a "},{"type":"codeVoice","code":"ComposedMiddleware"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":null,"code":["let composedOfThreeMiddlewares = composedOfTwoMiddlewares <> thirdMiddleware"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or"}]},{"type":"codeListing","syntax":null,"code":["let composedOfThreeMiddlewares = firstMiddleware <> secondMiddleware <> thirdMiddleware"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or"}]},{"type":"codeListing","syntax":null,"code":["let composedMiddlewares = firstMiddleware <> secondMiddleware","_ = composedMiddlewares <> thirdMiddleware","\/\/ assert(composedMiddlewares == firstMiddleware <> secondMiddleware <> thirdMiddleware)"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/__(_:_:)-4uag"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/__(_:_:)-4uag","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Initializes a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" and "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" middlewares parameters, or appends to the "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" if it is already a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", as shown below:"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"M2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"title":"<>(_:_:)","roleHeading":"Operator","role":"symbol","symbolKind":"op","externalID":"s:8SwiftRex2lgoiyAA18ComposedMiddlewareVy15InputActionTypeQz06OutputgH0Qz05StateH0QzGx_q_tAA0E8ProtocolRzAaLR_AEQy_AFRSAGQy_AHRSAIQy_AJRSr0_lF","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"},"doc://SwiftRex/documentation/SwiftRex/__(_:_:)-4uag":{"role":"symbol","title":"<>(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<>"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"M2"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M2"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ComposedMiddleware","preciseIdentifier":"s:8SwiftRex18ComposedMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" and "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" middlewares parameters, or appends to the "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" if it is already a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", as shown below:"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/__(_:_:)-4uag","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/__(_:_:)-4uag"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/ComposedMiddleware":{"role":"symbol","title":"ComposedMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ComposedMiddleware"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":" is a container of inner middlewares that are chained together in the order as they were composed. Whenever an "},{"type":"codeVoice","code":"EventProtocol"},{"type":"text","text":" or an "},{"type":"codeVoice","code":"ActionProtocol"},{"type":"text","text":" arrives to be handled by this "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", it will delegate to its internal chain of middlewares."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ComposedMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ComposedMiddleware"}],"url":"\/documentation\/swiftrex\/composedmiddleware"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"}}}