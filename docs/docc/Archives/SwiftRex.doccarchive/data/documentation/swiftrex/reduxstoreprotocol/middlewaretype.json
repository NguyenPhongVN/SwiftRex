{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MiddlewareType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/reduxstoreprotocol\/middlewaretype"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol\/MiddlewareType","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"symbol","metadata":{"role":"symbol","title":"MiddlewareType","roleHeading":"Associated Type","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP"}],"symbolKind":"associatedtype","externalID":"s:8SwiftRex18ReduxStoreProtocolP14MiddlewareTypeQa","required":true,"modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreProtocol/MiddlewareType":{"role":"symbol","title":"MiddlewareType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol\/MiddlewareType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/reduxstoreprotocol\/middlewaretype"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreProtocol":{"role":"symbol","title":"ReduxStoreProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreProtocol"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReduxStoreProtocol"}],"url":"\/documentation\/swiftrex\/reduxstoreprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"}}}