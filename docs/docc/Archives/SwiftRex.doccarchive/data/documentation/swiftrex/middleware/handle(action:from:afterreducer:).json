{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"kind":"internalParam","text":"dispatcher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV","text":"ActionSource"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV","text":"AfterReducer"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the action to be handled"}]}]},{"name":"dispatcher","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"information about the action source, representing the entity that created and dispatched the action"}]}]},{"name":"afterReducer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"it can be set to perform any operation after the reducer has changed the global state. If the function ends before you set"},{"type":"text","text":" "},{"type":"text","text":"this in\/out parameter, "},{"type":"codeVoice","code":"afterReducer"},{"type":"text","text":" will default to "},{"type":"codeVoice","code":".doNothing()"},{"type":"text","text":"."}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/middleware\/handle(action:from:afterreducer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/Middleware\/handle(action:from:afterReducer:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch additional actions."},{"type":"text","text":" "},{"type":"text","text":"This is also a good place for analytics, tracking, logging and telemetry. You can schedule tasks to run after the reducer changed the global"},{"type":"text","text":" "},{"type":"text","text":"state if you want, and\/or execute things before the reducer."},{"type":"text","text":" "},{"type":"text","text":"This function is only called by the store after the "},{"type":"codeVoice","code":"receiveContext(getState:output:)"},{"type":"text","text":" was called, so if you saved the received context from"},{"type":"text","text":" "},{"type":"text","text":"there you can safely use it here to get the state or dispatch new actions."},{"type":"text","text":" "},{"type":"text","text":"Setting the "},{"type":"codeVoice","code":"afterReducer"},{"type":"text","text":" in\/out parameter is optional, if you don’t set it, it defaults to "},{"type":"codeVoice","code":".doNothing()"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"modules":[{"name":"SwiftRex"}],"role":"symbol","title":"handle(action:from:afterReducer:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:8SwiftRex10MiddlewareP6handle6action4from12afterReducery15InputActionTypeQz_AA0J6SourceVAA05AfterH0VztF","required":true,"platforms":[]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/Middleware"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use `MiddlewareProtocol` instead of `Middleware`. This protocol will be removed on 1.0."}]}],"references":{"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/Middleware/handle(action:from:afterReducer:)":{"deprecated":true,"role":"symbol","title":"handle(action:from:afterReducer:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"afterReducer"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch additional actions."},{"type":"text","text":" "},{"type":"text","text":"This is also a good place for analytics, tracking, logging and telemetry. You can schedule tasks to run after the reducer changed the global"},{"type":"text","text":" "},{"type":"text","text":"state if you want, and\/or execute things before the reducer."},{"type":"text","text":" "},{"type":"text","text":"This function is only called by the store after the "},{"type":"codeVoice","code":"receiveContext(getState:output:)"},{"type":"text","text":" was called, so if you saved the received context from"},{"type":"text","text":" "},{"type":"text","text":"there you can safely use it here to get the state or dispatch new actions."},{"type":"text","text":" "},{"type":"text","text":"Setting the "},{"type":"codeVoice","code":"afterReducer"},{"type":"text","text":" in\/out parameter is optional, if you don’t set it, it defaults to "},{"type":"codeVoice","code":".doNothing()"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/Middleware\/handle(action:from:afterReducer:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middleware\/handle(action:from:afterreducer:)"},"doc://SwiftRex/documentation/SwiftRex/Middleware":{"deprecated":true,"role":"symbol","title":"Middleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}],"abstract":[{"type":"text","text":"⛓ "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the "},{"type":"codeVoice","code":"ReduxStoreProtocol"},{"type":"text","text":" pipeline in order to handle each"},{"type":"text","text":" "},{"type":"text","text":"action received ("},{"type":"codeVoice","code":"InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions ("},{"type":"codeVoice","code":"OutputActionType"},{"type":"text","text":") in the process."},{"type":"text","text":" "},{"type":"text","text":"This happens before the "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" to do its job."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/Middleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Middleware"}],"url":"\/documentation\/swiftrex\/middleware"},"doc://SwiftRex/documentation/SwiftRex/ActionSource":{"role":"symbol","title":"ActionSource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionSource"}],"abstract":[{"type":"text","text":"Representation of the entity responsible for creating and dispatching the action, including information useful for logging, debugging, analytics"},{"type":"text","text":" "},{"type":"text","text":"or monitoring. The action source will be implicitly created when "},{"type":"codeVoice","code":"ActionHandler.dispatch"},{"type":"text","text":" is called from a middleware, view or presenter, and"},{"type":"text","text":" "},{"type":"text","text":"it will contain the file, function and line from where the dispatch function was called. Additionally you can append extra information useful"},{"type":"text","text":" "},{"type":"text","text":"for debugging, as an optional String attached to the ActionSource."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionSource"}],"url":"\/documentation\/swiftrex\/actionsource"},"doc://SwiftRex/documentation/SwiftRex/AfterReducer":{"deprecated":true,"role":"symbol","title":"AfterReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AfterReducer"}],"abstract":[{"type":"text","text":"Wraps a closure that will be called after the Reducer pipeline has changed the state with the current action."},{"type":"text","text":" "},{"type":"text","text":"With this structure, a middleware can schedule some callback to be executed with the new state, and evidently access this state to check what’s"},{"type":"text","text":" "},{"type":"text","text":"different. This can be very useful for Middlewares that perform logging, monitoring or telemetry, so you can check the state before and after"},{"type":"text","text":" "},{"type":"text","text":"reducers’ execution, or how much time it took for the whole chain to be called (in case this middleware is the first in the chain, of course)."},{"type":"text","text":" "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is a monoid, that means it can be combined with another "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" to form a new one (that executes both operations in the"},{"type":"text","text":" "},{"type":"text","text":"reverse order) and an identity instance, that when combined with any other "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" changes nothing in the result, acting as a neutral"},{"type":"text","text":" "},{"type":"text","text":"element in composition. The identity of an "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is the static instance "},{"type":"codeVoice","code":"doNothing()"},{"type":"text","text":", that contains an empty closure for no-op."},{"type":"text","text":" "},{"type":"text","text":"The combination between two "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" instances occur in reverse order so the first middleware will have its “after reducer” closure executed"},{"type":"text","text":" "},{"type":"text","text":"last. This composition can be achieved by using the operator "},{"type":"codeVoice","code":"<>"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AfterReducer"}],"url":"\/documentation\/swiftrex\/afterreducer"}}}