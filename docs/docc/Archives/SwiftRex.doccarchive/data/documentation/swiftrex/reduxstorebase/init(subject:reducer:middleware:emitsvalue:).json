{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subject"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailableReplayLastSubjectType","preciseIdentifier":"s:8SwiftRex31UnfailableReplayLastSubjectTypea","text":"UnfailableReplayLastSubjectType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/Reducer","preciseIdentifier":"s:8SwiftRex7ReducerV","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"middleware"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":", "},{"kind":"externalParam","text":"emitsValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO","text":"ShouldEmitValue"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":"> = .always) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","preciseIdentifier":"s:8SwiftRex18MiddlewareProtocolP","text":"MiddlewareProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"subject","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a reactive subject type that replays the last value, never fails and works on "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":" elements. It"},{"type":"text","text":" "},{"type":"text","text":"should contain the initial state already."}]}]},{"name":"reducer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a reducer function wrapped in a monoid container of type "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":", able to handle the state of the"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":" and actions of type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":". For "},{"type":"codeVoice","code":"reducer"},{"type":"text","text":" composition, please use the diamond"},{"type":"text","text":" "},{"type":"text","text":"operator ("},{"type":"codeVoice","code":"<>"},{"type":"text","text":") and for reducers that understand only a sub-state part, use the "},{"type":"codeVoice","code":"lift"},{"type":"text","text":" functions to"},{"type":"text","text":" "},{"type":"text","text":"elevate them to the same global state and global action type."}]}]},{"name":"middleware","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a middleware pipeline, that can be any flat middleware or a "},{"type":"codeVoice","code":"ComposedMiddleware"},{"type":"text","text":", as long as it’s"},{"type":"text","text":" "},{"type":"text","text":"able to handle the state of type "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":" and actions of type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":". For "},{"type":"codeVoice","code":"middleware"},{"type":"text","text":" "},{"type":"text","text":"composition, please use the diamond operator ("},{"type":"codeVoice","code":"<>"},{"type":"text","text":") and for middlewares that understand only a"},{"type":"text","text":" "},{"type":"text","text":"sub-state part, use the "},{"type":"codeVoice","code":"lift"},{"type":"text","text":" functions to elevate them to the same global state and global action"},{"type":"text","text":" "},{"type":"text","text":"type."}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/reduxstorebase\/init(subject:reducer:middleware:emitsvalue:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/init(subject:reducer:middleware:emitsValue:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Required initializer that configures the action handler pipeline and the state storage"}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subject"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailableReplayLastSubjectType","preciseIdentifier":"s:8SwiftRex31UnfailableReplayLastSubjectTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:8SwiftRex7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"middleware"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":", "},{"kind":"externalParam","text":"emitsValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"title":"init(subject:reducer:middleware:emitsValue:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:8SwiftRex14ReduxStoreBaseC7subject7reducer10middleware10emitsValueACyxq_GAA21ReplayLastSubjectTypeVyq_s5NeverOG_AA7ReducerVyxq_Gqd__AA010ShouldEmitJ0Oyq_Gtc011InputActionN0Qyd__Rsz05StateN0Qyd__Rs_AA18MiddlewareProtocolRd__06OutputtN0Qyd__AURSlufc","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/InputActionType":{"role":"symbol","title":"InputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" knows how to handle, so the store will forward actions of this type to this middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/inputactiontype"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue":{"role":"symbol","title":"ShouldEmitValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ShouldEmitValue"}],"abstract":[{"type":"text","text":"A predicate that determines if a state change should notify subscribers or not, by comparing previous and new states and returning a Bool true in"},{"type":"text","text":" "},{"type":"text","text":"case it should emit it, or false in case it should not emit it."},{"type":"text","text":" "},{"type":"text","text":"It comes with some standard options like "},{"type":"codeVoice","code":".always"},{"type":"text","text":", "},{"type":"codeVoice","code":".never"},{"type":"text","text":", "},{"type":"codeVoice","code":".when(old, new) -> Bool"},{"type":"text","text":" and, for "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" structures, "},{"type":"codeVoice","code":".whenDifferent"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ShouldEmitValue"}],"url":"\/documentation\/swiftrex\/shouldemitvalue"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/OutputActionType":{"role":"symbol","title":"OutputActionType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutputActionType"}],"abstract":[{"type":"text","text":"The Action type that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" will eventually trigger back to the store in response of side-effects. This can be the same"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":" or different, in case you want to separate your enum in requests and responses."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/outputactiontype"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a “Store”: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a “proxy” that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase/init(subject:reducer:middleware:emitsValue:)":{"role":"symbol","title":"init(subject:reducer:middleware:emitsValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subject"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailableReplayLastSubjectType","preciseIdentifier":"s:8SwiftRex31UnfailableReplayLastSubjectTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:8SwiftRex7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"middleware"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":", "},{"kind":"externalParam","text":"emitsValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Required initializer that configures the action handler pipeline and the state storage"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase\/init(subject:reducer:middleware:emitsValue:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/reduxstorebase\/init(subject:reducer:middleware:emitsvalue:)"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase":{"role":"symbol","title":"ReduxStoreBase","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreBase"}],"abstract":[{"type":"text","text":"🏪 "},{"type":"codeVoice","code":"ReduxStoreBase"},{"type":"text","text":" is a base class that can be used to create the main store of an app, using the redux pattern."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReduxStoreBase"}],"url":"\/documentation\/swiftrex\/reduxstorebase"},"doc://SwiftRex/documentation/SwiftRex/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" is a pure function wrapped in a monoid container, that takes an action and the current state to calculate the new state."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/swiftrex\/reducer"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol":{"role":"symbol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" is a plugin, or a composition of several plugins, that are assigned to the app global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" pipeline in order to"},{"type":"text","text":" "},{"type":"text","text":"handle each action received ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/InputActionType"},{"type":"text","text":"), to execute side-effects in response, and eventually dispatch more actions"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/OutputActionType"},{"type":"text","text":") in the process. It can also access the most up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" while handling an incoming action."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/swiftrex\/middlewareprotocol"},"doc://SwiftRex/documentation/SwiftRex/MiddlewareProtocol/StateType":{"role":"symbol","title":"StateType","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateType"}],"abstract":[{"type":"text","text":"The State part that this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol"},{"type":"text","text":" needs to read in order to make decisions. This middleware will be able to read the most"},{"type":"text","text":" "},{"type":"text","text":"up-to-date "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType"},{"type":"text","text":" from the store while handling an incoming action, but it can never write or make changes to it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/MiddlewareProtocol\/StateType","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftrex\/middlewareprotocol\/statetype"},"doc://SwiftRex/documentation/SwiftRex/UnfailableReplayLastSubjectType":{"role":"symbol","title":"UnfailableReplayLastSubjectType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfailableReplayLastSubjectType"}],"abstract":[{"type":"text","text":"Abstraction over subject types able to keep the last object ("},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"BehaviorSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"MutableProperty"},{"type":"text","text":", "},{"type":"codeVoice","code":"Variable"},{"type":"text","text":") from"},{"type":"text","text":" "},{"type":"text","text":"reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"For this specific case, the failure\/error is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":", meaning that this subject can’t emit error."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailableReplayLastSubjectType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnfailableReplayLastSubjectType"}],"url":"\/documentation\/swiftrex\/unfailablereplaylastsubjecttype"}}}