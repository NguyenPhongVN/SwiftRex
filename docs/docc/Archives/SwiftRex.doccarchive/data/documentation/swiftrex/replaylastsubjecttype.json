{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReplayLastSubjectType"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ErrorType"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ErrorType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/replaylastsubjecttype"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Abstraction over subject types able to keep the last object ("},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"BehaviorSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"MutableProperty"},{"type":"text","text":", "},{"type":"codeVoice","code":"Variable"},{"type":"text","text":") from"},{"type":"text","text":" "},{"type":"text","text":"reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReplayLastSubjectType"}],"title":"ReplayLastSubjectType","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:8SwiftRex21ReplayLastSubjectTypeV","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"ReplayLastSubjectType"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/init(publisher:subscriber:value:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/publisher","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/subscriber","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/value"]},{"title":"Instance Methods","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/mutate(_:)","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/mutate(when:action:)"]}],"references":{"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType":{"role":"symbol","title":"ReplayLastSubjectType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReplayLastSubjectType"}],"abstract":[{"type":"text","text":"Abstraction over subject types able to keep the last object ("},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"BehaviorSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"MutableProperty"},{"type":"text","text":", "},{"type":"codeVoice","code":"Variable"},{"type":"text","text":") from"},{"type":"text","text":" "},{"type":"text","text":"reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReplayLastSubjectType"}],"url":"\/documentation\/swiftrex\/replaylastsubjecttype"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/mutate(when:action:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"mutate(when:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mutate"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"when"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"}],"abstract":[{"type":"text","text":"Atomically mutate this subject’s value in a closure where you can read and write the current element value"},{"type":"text","text":" "},{"type":"text","text":"Before the mutation, a condition will be evaluated and the mutation will only happen when the result of this evaluation returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This allows you to simulate the mutation before executing it."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/mutate(when:action:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/mutate(when:action:)"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/subscriber":{"role":"symbol","title":"subscriber","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscriber"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubscriberType","preciseIdentifier":"s:8SwiftRex14SubscriberTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ErrorType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Downstream subscriber that subscribes to this subject and will receive events from it"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/subscriber","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/subscriber"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/publisher":{"role":"symbol","title":"publisher","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PublisherType","preciseIdentifier":"s:8SwiftRex13PublisherTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ErrorType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Upstream publisher that feeds data into this subject"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/publisher","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/publisher"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/mutate(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"mutate(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mutate"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"}],"abstract":[{"type":"text","text":"Atomically mutate this subject’s value in a closure where you can read and write the current element value"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/mutate(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/mutate(_:)"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/init(publisher:subscriber:value:)":{"role":"symbol","title":"init(publisher:subscriber:value:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PublisherType","preciseIdentifier":"s:8SwiftRex13PublisherTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ErrorType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"subscriber"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubscriberType","preciseIdentifier":"s:8SwiftRex14SubscriberTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ErrorType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates an abstraction over subject types able to keep the last object ("},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"BehaviorSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"MutableProperty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"Variable"},{"type":"text","text":") from reactive frameworks."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/init(publisher:subscriber:value:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/init(publisher:subscriber:value:)"},"doc://SwiftRex/documentation/SwiftRex/ReplayLastSubjectType/value":{"role":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"}],"abstract":[{"type":"text","text":"Reads the most recent element emitted by this subject. This subject can be seen as a variable in stateful programming style, it holds one"},{"type":"text","text":" "},{"type":"text","text":"value that can be read at any point using a getter function "},{"type":"codeVoice","code":"() -> Element"},{"type":"text","text":". Useful for bridging with the imperative world."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReplayLastSubjectType\/value","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/replaylastsubjecttype\/value"}}}