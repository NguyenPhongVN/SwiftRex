{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewActionType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType","preciseIdentifier":"s:8SwiftRex12AnyStoreTypeV","text":"AnyStoreType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType"},{"type":"text","text":" with same "},{"type":"codeVoice","code":"Statetype"},{"type":"text","text":" but different "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":" than the original store."}]}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a closure that will be executed every time an action arrives at the proxy "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":", so we can map it into the expected"},{"type":"text","text":" "},{"type":"text","text":"action type of the original "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":"."}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/anystoretype\/contramapaction(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType\/contramapAction(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Create another "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" that handles a different type of Action. The original store will be used behind the scenes, by only the provided"},{"type":"text","text":" "},{"type":"text","text":"‚Äútransform‚Äù closure whenever an action arrives."}],"kind":"symbol","metadata":{"role":"symbol","title":"contramapAction(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewActionType"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyStoreType","preciseIdentifier":"s:8SwiftRex12AnyStoreTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:8SwiftRex9StoreTypePAAE15contramapActionyAA03AnycD0Vyqd__05StateD0QzG0fD0Qzqd__clF::SYNTHESIZED::s:8SwiftRex12AnyStoreTypeV","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType","doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType\/StoreType-Implementations"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/StateProvider":{"role":"symbol","title":"StateProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateProvider"}],"abstract":[{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":" defines a protocol for entities able to offer state publishers (Combine Publisher, RxSwift Observable,"},{"type":"text","text":" "},{"type":"text","text":"ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this"},{"type":"text","text":" "},{"type":"text","text":"container. Usually a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from"},{"type":"text","text":" "},{"type":"text","text":"the global source-of-truth."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StateProvider"}],"url":"\/documentation\/swiftrex\/stateprovider"},"doc://SwiftRex/documentation/SwiftRex/ReduxStoreBase":{"role":"symbol","title":"ReduxStoreBase","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReduxStoreBase"}],"abstract":[{"type":"text","text":"üè™ "},{"type":"codeVoice","code":"ReduxStoreBase"},{"type":"text","text":" is a base class that can be used to create the main store of an app, using the redux pattern."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReduxStoreBase"}],"url":"\/documentation\/swiftrex\/reduxstorebase"},"doc://SwiftRex/documentation/SwiftRex/StoreProjection":{"role":"symbol","title":"StoreProjection","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreProjection"}],"abstract":[{"type":"text","text":"An app should have a single real Store, holding a single source-of-truth. However, we can ‚Äúderive‚Äù this store to small subsets, called store"},{"type":"text","text":" "},{"type":"text","text":"projections, that will handle either a smaller part of the state or action tree, or even a completely different type of actions and states as"},{"type":"text","text":" "},{"type":"text","text":"long as we can map back-and-forth to the original store types. It won‚Äôt store anything, only project the original store. For example, a View can"},{"type":"text","text":" "},{"type":"text","text":"define a completely custom View State and View Action, and we can create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":" that works on these types, as long as it‚Äôs backed"},{"type":"text","text":" "},{"type":"text","text":"by a real store which State and Action types can be mapped somehow to the View State and View Action types. The Store Projection will take care"},{"type":"text","text":" "},{"type":"text","text":"of translating these entities."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreProjection"}],"url":"\/documentation\/swiftrex\/storeprojection"},"doc://SwiftRex/documentation/SwiftRex/StoreType":{"role":"symbol","title":"StoreType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreType"}],"abstract":[{"type":"text","text":"A protocol that defines the two expected roles of a ‚ÄúStore‚Äù: receive\/distribute actions ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler"},{"type":"text","text":"); and publish changes of the the"},{"type":"text","text":" "},{"type":"text","text":"current app state ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"},{"type":"text","text":") to possible subscribers. It can be a real store (such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ReduxStoreBase"},{"type":"text","text":") or just a ‚Äúproxy‚Äù that acts on"},{"type":"text","text":" "},{"type":"text","text":"behalf of a real store, for example, in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreProjection"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreType"}],"url":"\/documentation\/swiftrex\/storetype"},"doc://SwiftRex/documentation/SwiftRex/AnyStoreType/StoreType-Implementations":{"role":"collectionGroup","title":"StoreType Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType\/StoreType-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/anystoretype\/storetype-implementations"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/ActionHandler":{"role":"symbol","title":"ActionHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionHandler"}],"abstract":[{"type":"codeVoice","code":"ActionHandler"},{"type":"text","text":" defines a protocol for entities able to handle actions - defined by the associated type "},{"type":"codeVoice","code":"ActionType"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionHandler"}],"url":"\/documentation\/swiftrex\/actionhandler"},"doc://SwiftRex/documentation/SwiftRex/AnyStoreType":{"role":"symbol","title":"AnyStoreType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyStoreType"}],"abstract":[{"type":"text","text":"Type-erasure for the protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyStoreType"}],"url":"\/documentation\/swiftrex\/anystoretype"},"doc://SwiftRex/documentation/SwiftRex/AnyStoreType/contramapAction(_:)":{"role":"symbol","title":"contramapAction(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contramapAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewActionType"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyStoreType","preciseIdentifier":"s:8SwiftRex12AnyStoreTypeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Create another "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StoreType"},{"type":"text","text":" that handles a different type of Action. The original store will be used behind the scenes, by only the provided"},{"type":"text","text":" "},{"type":"text","text":"‚Äútransform‚Äù closure whenever an action arrives."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStoreType\/contramapAction(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/anystoretype\/contramapaction(_:)"}}}