{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":" "},{"kind":"internalParam","text":"outputActionMap"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":" "},{"kind":"internalParam","text":"stateMap"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV","text":"LiftMiddleware"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a "},{"type":"codeVoice","code":"LiftMiddleware"},{"type":"text","text":" that knows how to translate "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Part"},{"type":"text","text":" and vice-versa. To the external world this resulting middleware will"},{"type":"text","text":" "},{"type":"text","text":"“speak” global types to be plugged into the main Store. Internally it will “speak” the types of the wrapped middleware."}]}]},{"kind":"parameters","parameters":[{"name":"outputActionMap","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a function that will translate the local actions dispatched by this middleware into a global action type for your store."},{"type":"text","text":" "},{"type":"text","text":"Usually this is wrapping the enum in a global action tree, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"{ GlobalAction.someSubAction(.middlewareLocalAction($0)) }"},{"type":"text","text":"."}]}]},{"name":"stateMap","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a function that will translate the global state of your store into the local state of this middleware. Usually this is a KeyPath in"},{"type":"text","text":" "},{"type":"text","text":"the global state struct, such as "},{"type":"codeVoice","code":"\\GlobalState.subState.middlewareLocalState"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":null,"code":["struct Location {","   let latitude: Double","   let longitude: Double","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s call it "},{"type":"codeVoice","code":"Part"},{"type":"text","text":". Both, this state and its middleware will be part of an external framework, used by dozens of apps. Internally probably the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" will use "},{"type":"codeVoice","code":"CoreLocation"},{"type":"text","text":" to fetch the GPS changes, and triggers some actions. On the main app we have a global state, that we now"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["struct MyGlobalState {","   let title: String?","   let listOfItems: [Item]","   let currentLocation: Location","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As expected, "},{"type":"codeVoice","code":"Part"},{"type":"text","text":" is a property of "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":", maybe not directly, it could be several nodes deep in the tree."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because our "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" understands "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":" and our "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" understands "},{"type":"codeVoice","code":"Part"},{"type":"text","text":", we must "},{"type":"codeVoice","code":"lift(_:)"},{"type":"text","text":" the middleware to the "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":" level, by"},{"type":"text","text":" "},{"type":"text","text":"using:"}]},{"type":"codeListing","syntax":null,"code":["let globalStateMiddleware = gpsMiddleware.lift(state: \\MyGlobalState.currentLocation)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now this middleware can be used within our "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" or even composed with others. It also can be used in other apps as long as we have a way to"},{"type":"text","text":" "},{"type":"text","text":"lift it to the world of "},{"type":"codeVoice","code":"Whole"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/lifttocollectionmiddleware\/lift(outputaction:state:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware\/lift(outputAction:state:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"kind":"symbol","metadata":{"role":"symbol","title":"lift(outputAction:state:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:8SwiftRex18MiddlewareProtocolPAAE4lift12outputAction5stateAA04LiftC0Vyqd__qd_0_qd_1_xGqd_0_06OutputG4TypeQzc_05StateK0Qzqd_1_ct05InputgK0QzRsd__r1_lF::SYNTHESIZED::s:8SwiftRex26LiftToCollectionMiddlewareV","extendedModule":"SwiftRex","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware\/MiddlewareProtocol-Implementations"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/LiftToCollectionMiddleware":{"role":"symbol","title":"LiftToCollectionMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftToCollectionMiddleware"}],"abstract":[{"type":"text","text":"This is a container that lifts a sub-state middleware to a global state middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LiftToCollectionMiddleware"}],"url":"\/documentation\/swiftrex\/lifttocollectionmiddleware"},"doc://SwiftRex/documentation/SwiftRex/LiftToCollectionMiddleware/MiddlewareProtocol-Implementations":{"role":"collectionGroup","title":"MiddlewareProtocol Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware\/MiddlewareProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/lifttocollectionmiddleware\/middlewareprotocol-implementations"},"doc://SwiftRex/documentation/SwiftRex/LiftToCollectionMiddleware/lift(outputAction:state:)":{"role":"symbol","title":"lift(outputAction:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftToCollectionMiddleware\/lift(outputAction:state:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/lifttocollectionmiddleware\/lift(outputaction:state:)"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware":{"role":"symbol","title":"LiftMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftMiddleware"}],"abstract":[{"type":"text","text":"This is a container that lifts a sub-state middleware to a global state middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LiftMiddleware"}],"url":"\/documentation\/swiftrex\/liftmiddleware"}}}