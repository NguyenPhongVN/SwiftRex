{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"kind":"internalParam","text":"dispatcher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV","text":"ActionSource"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/GetState","preciseIdentifier":"s:8SwiftRex8GetStatea","text":"GetState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IO","preciseIdentifier":"s:8SwiftRex2IOV","text":"IO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"possible Side-Effects wrapped in an IO struct"}]}]},{"kind":"parameters","parameters":[{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the action to be handled"}]}]},{"name":"dispatcher","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"information about the file, line and function that dispatched this action"}]}]},{"name":"state","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a closure to obtain the most recent state"}]}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/liftmiddleware\/handle(action:from:state:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/handle(action:from:state:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch"},{"type":"text","text":" "},{"type":"text","text":"additional actions. This is also a good place for analytics, tracking, logging and telemetry. Because the lift"},{"type":"text","text":" "},{"type":"text","text":"middleware is derived from a sub-state\/sub-action middleware, every global action received will be mapped into"},{"type":"text","text":" "},{"type":"text","text":"a sub-action, in a operation that can return nil ("},{"type":"codeVoice","code":"Optional<SubAction>"},{"type":"text","text":"). In case it’s nil, it means that the"},{"type":"text","text":" "},{"type":"text","text":"sub-action middleware doesn’t work with this type of action, so the lifted middleware will simply call the next"},{"type":"text","text":" "},{"type":"text","text":"middleware in the chain. On the other hand, if this operation returns a non-nil local action, this local action will"},{"type":"text","text":" "},{"type":"text","text":"be handled by the child middleware, which is also responsible for calling "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" in this case. When the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" "},{"type":"text","text":"type is also lifted, the context property will translate the global state into local state as expected every time"},{"type":"text","text":" "},{"type":"text","text":"you call "},{"type":"codeVoice","code":"context().getState()"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetState","preciseIdentifier":"s:8SwiftRex8GetStatea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IO","preciseIdentifier":"s:8SwiftRex2IOV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":">"}],"title":"handle(action:from:state:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:8SwiftRex14LiftMiddlewareV6handle6action4from5stateAA2IOVyq_Gx_AA12ActionSourceVq0_yctF","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/ActionSource":{"role":"symbol","title":"ActionSource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionSource"}],"abstract":[{"type":"text","text":"Representation of the entity responsible for creating and dispatching the action, including information useful for logging, debugging, analytics"},{"type":"text","text":" "},{"type":"text","text":"or monitoring. The action source will be implicitly created when "},{"type":"codeVoice","code":"ActionHandler.dispatch"},{"type":"text","text":" is called from a middleware, view or presenter, and"},{"type":"text","text":" "},{"type":"text","text":"it will contain the file, function and line from where the dispatch function was called. Additionally you can append extra information useful"},{"type":"text","text":" "},{"type":"text","text":"for debugging, as an optional String attached to the ActionSource."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ActionSource","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActionSource"}],"url":"\/documentation\/swiftrex\/actionsource"},"doc://SwiftRex/documentation/SwiftRex/GetState":{"role":"symbol","title":"GetState","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"GetState"}],"abstract":[{"type":"text","text":"Zero-argument function that returns the current state. "},{"type":"text","text":" "},{"type":"codeVoice","code":"() -> StateType"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/GetState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GetState"}],"url":"\/documentation\/swiftrex\/getstate"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware/handle(action:from:state:)":{"role":"symbol","title":"handle(action:from:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetState","preciseIdentifier":"s:8SwiftRex8GetStatea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IO","preciseIdentifier":"s:8SwiftRex2IOV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch"},{"type":"text","text":" "},{"type":"text","text":"additional actions. This is also a good place for analytics, tracking, logging and telemetry. Because the lift"},{"type":"text","text":" "},{"type":"text","text":"middleware is derived from a sub-state\/sub-action middleware, every global action received will be mapped into"},{"type":"text","text":" "},{"type":"text","text":"a sub-action, in a operation that can return nil ("},{"type":"codeVoice","code":"Optional<SubAction>"},{"type":"text","text":"). In case it’s nil, it means that the"},{"type":"text","text":" "},{"type":"text","text":"sub-action middleware doesn’t work with this type of action, so the lifted middleware will simply call the next"},{"type":"text","text":" "},{"type":"text","text":"middleware in the chain. On the other hand, if this operation returns a non-nil local action, this local action will"},{"type":"text","text":" "},{"type":"text","text":"be handled by the child middleware, which is also responsible for calling "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" in this case. When the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" "},{"type":"text","text":"type is also lifted, the context property will translate the global state into local state as expected every time"},{"type":"text","text":" "},{"type":"text","text":"you call "},{"type":"codeVoice","code":"context().getState()"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware\/handle(action:from:state:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/liftmiddleware\/handle(action:from:state:)"},"doc://SwiftRex/documentation/SwiftRex/LiftMiddleware":{"role":"symbol","title":"LiftMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiftMiddleware"}],"abstract":[{"type":"text","text":"This is a container that lifts a sub-state middleware to a global state middleware."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/LiftMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LiftMiddleware"}],"url":"\/documentation\/swiftrex\/liftmiddleware"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/IO":{"role":"symbol","title":"IO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IO"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/IO","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IO"}],"url":"\/documentation\/swiftrex\/io"}}}