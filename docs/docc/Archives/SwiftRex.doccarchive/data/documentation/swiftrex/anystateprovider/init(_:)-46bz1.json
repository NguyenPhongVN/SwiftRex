{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea","text":"UnfailablePublisherType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/anystateprovider\/init(_:)-46bz1"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-46bz1","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"title":"init(_:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:8SwiftRex16AnyStateProviderVyACyxGAA13PublisherTypeVyxs5NeverOGcfc","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider/init(_:)-46bz1":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-46bz1","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/anystateprovider\/init(_:)-46bz1"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider":{"role":"symbol","title":"AnyStateProvider","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyStateProvider"}],"abstract":[{"type":"codeVoice","code":"AnyStateProvider"},{"type":"text","text":" erases the protocol "},{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":", which defines a entities able to offer state publishers (Combine Publisher, RxSwift"},{"type":"text","text":" "},{"type":"text","text":"Observable, ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this container. Usually"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from the global source-of-truth."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyStateProvider"}],"url":"\/documentation\/swiftrex\/anystateprovider"},"doc://SwiftRex/documentation/SwiftRex/UnfailablePublisherType":{"role":"symbol","title":"UnfailablePublisherType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfailablePublisherType"}],"abstract":[{"type":"text","text":"Abstraction over publisher\/observable\/signal producer types from reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"For this specific case, the failure\/error is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":", meaning that this publisher canâ€™t emit error."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailablePublisherType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnfailablePublisherType"}],"url":"\/documentation\/swiftrex\/unfailablepublishertype"}}}