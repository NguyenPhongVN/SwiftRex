{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ShouldEmitValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/shouldemitvalue"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A predicate that determines if a state change should notify subscribers or not, by comparing previous and new states and returning a Bool true in"},{"type":"text","text":" "},{"type":"text","text":"case it should emit it, or false in case it should not emit it."},{"type":"text","text":" "},{"type":"text","text":"It comes with some standard options like "},{"type":"codeVoice","code":".always"},{"type":"text","text":", "},{"type":"codeVoice","code":".never"},{"type":"text","text":", "},{"type":"codeVoice","code":".when(old, new) -> Bool"},{"type":"text","text":" and, for "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" structures, "},{"type":"codeVoice","code":".whenDifferent"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ShouldEmitValue"}],"title":"ShouldEmitValue","roleHeading":"Enumeration","role":"symbol","symbolKind":"enum","externalID":"s:8SwiftRex15ShouldEmitValueO","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"ShouldEmitValue"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/always","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/never","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/when(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldEmit(previous:new:)","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldRemove(previous:new:)"]},{"title":"Type Properties","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/whenDifferent"]}],"references":{"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/never":{"role":"symbol","title":"ShouldEmitValue.never","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"never"}],"abstract":[{"type":"text","text":"It will never emit changes, regardless of previous and new state"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/never","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/never"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/shouldRemove(previous:new:)":{"role":"symbol","title":"shouldRemove(previous:new:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldRemove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"previous"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"new"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Evaluates the predicate and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" in case this should be ignored, or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" in case this change should be emitted. It’s the exact"},{"type":"text","text":" "},{"type":"text","text":"inversion of "},{"type":"codeVoice","code":"shouldEmit"},{"type":"text","text":" and useful for operator "},{"type":"codeVoice","code":".removeDuplicates"},{"type":"text","text":" that some Reactive libraries offer."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldRemove(previous:new:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/shouldremove(previous:new:)"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/shouldEmit(previous:new:)":{"role":"symbol","title":"shouldEmit(previous:new:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldEmit"},{"kind":"text","text":"("},{"kind":"externalParam","text":"previous"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"new"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Evaluates the predicate and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" in case this should be emitted, or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" in case this change should be ignored"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldEmit(previous:new:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/shouldemit(previous:new:)"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue":{"role":"symbol","title":"ShouldEmitValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ShouldEmitValue"}],"abstract":[{"type":"text","text":"A predicate that determines if a state change should notify subscribers or not, by comparing previous and new states and returning a Bool true in"},{"type":"text","text":" "},{"type":"text","text":"case it should emit it, or false in case it should not emit it."},{"type":"text","text":" "},{"type":"text","text":"It comes with some standard options like "},{"type":"codeVoice","code":".always"},{"type":"text","text":", "},{"type":"codeVoice","code":".never"},{"type":"text","text":", "},{"type":"codeVoice","code":".when(old, new) -> Bool"},{"type":"text","text":" and, for "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" structures, "},{"type":"codeVoice","code":".whenDifferent"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ShouldEmitValue"}],"url":"\/documentation\/swiftrex\/shouldemitvalue"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/whenDifferent":{"conformance":{"constraints":[{"type":"codeVoice","code":"StateType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"whenDifferent","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"whenDifferent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"For "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" structures, "},{"type":"codeVoice","code":".whenDifferent"},{"type":"text","text":" will run "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator between old and new state, and notify when they are different, or ignore"},{"type":"text","text":" "},{"type":"text","text":"when they are equal."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/whenDifferent","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/whendifferent"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/when(_:)":{"role":"symbol","title":"ShouldEmitValue.when(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"when"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"It’s a custom-defined predicate, you’ll be given old and new state, and must return a Bool indicating what you’ve decided from that change,"},{"type":"text","text":" "},{"type":"text","text":"being "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when you want this change to be notified, or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" when you want it to be ignored."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/when(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/when(_:)"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/always":{"role":"symbol","title":"ShouldEmitValue.always","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"always"}],"abstract":[{"type":"text","text":"It will always emit changes, regardless of previous and new state"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/always","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/always"}}}