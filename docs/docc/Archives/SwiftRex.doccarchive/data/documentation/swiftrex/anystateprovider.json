{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyStateProvider"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only protocol requirement is to offer a property "},{"type":"codeVoice","code":"statePublisher"},{"type":"text","text":" that will allow other entities to subscribe to state changes and react to"},{"type":"text","text":" "},{"type":"text","text":"those."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/anystateprovider"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"AnyStateProvider"},{"type":"text","text":" erases the protocol "},{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":", which defines a entities able to offer state publishers (Combine Publisher, RxSwift"},{"type":"text","text":" "},{"type":"text","text":"Observable, ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this container. Usually"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from the global source-of-truth."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyStateProvider"}],"title":"AnyStateProvider","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:8SwiftRex16AnyStateProviderV","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"AnyStateProvider"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-46bz1","doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-56mtv"]},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/statePublisher"]},{"title":"Default Implementations","identifiers":["doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/StateProvider-Implementations"],"generated":true}],"references":{"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider/statePublisher":{"role":"symbol","title":"statePublisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"statePublisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The state publisher that can be observed by counterparts"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/statePublisher","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/anystateprovider\/statepublisher"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider/init(_:)-56mtv":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-56mtv","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/anystateprovider\/init(_:)-56mtv"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider":{"role":"symbol","title":"AnyStateProvider","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyStateProvider"}],"abstract":[{"type":"codeVoice","code":"AnyStateProvider"},{"type":"text","text":" erases the protocol "},{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":", which defines a entities able to offer state publishers (Combine Publisher, RxSwift"},{"type":"text","text":" "},{"type":"text","text":"Observable, ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this container. Usually"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from the global source-of-truth."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyStateProvider"}],"url":"\/documentation\/swiftrex\/anystateprovider"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider/init(_:)-46bz1":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">)"}],"abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/init(_:)-46bz1","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/anystateprovider\/init(_:)-46bz1"},"doc://SwiftRex/documentation/SwiftRex/StateProvider":{"role":"symbol","title":"StateProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateProvider"}],"abstract":[{"type":"codeVoice","code":"StateProvider"},{"type":"text","text":" defines a protocol for entities able to offer state publishers (Combine Publisher, RxSwift Observable,"},{"type":"text","text":" "},{"type":"text","text":"ReactiveSwift SignalProducer) of certain "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":", so everybody can observe the global state changes through this"},{"type":"text","text":" "},{"type":"text","text":"container. Usually a "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" will implement that, but it can also be a "},{"type":"codeVoice","code":"StoreProjection"},{"type":"text","text":" with a state that is derived from"},{"type":"text","text":" "},{"type":"text","text":"the global source-of-truth."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/StateProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StateProvider"}],"url":"\/documentation\/swiftrex\/stateprovider"},"doc://SwiftRex/documentation/SwiftRex/AnyStateProvider/StateProvider-Implementations":{"role":"collectionGroup","title":"StateProvider Implementations","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AnyStateProvider\/StateProvider-Implementations","kind":"article","type":"topic","url":"\/documentation\/swiftrex\/anystateprovider\/stateprovider-implementations"}}}