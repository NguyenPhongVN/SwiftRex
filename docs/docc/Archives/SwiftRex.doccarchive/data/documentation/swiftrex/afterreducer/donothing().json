{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"doNothing"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV","text":"AfterReducer"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/afterreducer\/donothing()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer\/doNothing()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The identity of an "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is the static instance "},{"type":"codeVoice","code":"doNothing()"},{"type":"text","text":", that contains an empty closure for no-op."},{"type":"text","text":" "},{"type":"text","text":"When combined with any other "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" changes nothing in the result, acting as a neutral element in composition."}],"kind":"symbol","metadata":{"role":"symbol","title":"doNothing()","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"doNothing"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"}],"symbolKind":"method","externalID":"s:8SwiftRex12AfterReducerV9doNothingACyFZ","modules":[{"name":"SwiftRex"}],"platforms":[]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use `MiddlewareProtocol` instead of `Middleware`. It doesn't use `AfterReducer`. This struct will be removed on 1.0."}]}],"references":{"doc://SwiftRex/documentation/SwiftRex/AfterReducer/doNothing()":{"role":"symbol","title":"doNothing()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"doNothing"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AfterReducer","preciseIdentifier":"s:8SwiftRex12AfterReducerV"}],"abstract":[{"type":"text","text":"The identity of an "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is the static instance "},{"type":"codeVoice","code":"doNothing()"},{"type":"text","text":", that contains an empty closure for no-op."},{"type":"text","text":" "},{"type":"text","text":"When combined with any other "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" changes nothing in the result, acting as a neutral element in composition."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer\/doNothing()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/swiftrex\/afterreducer\/donothing()"},"doc://SwiftRex/documentation/SwiftRex/AfterReducer":{"deprecated":true,"role":"symbol","title":"AfterReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AfterReducer"}],"abstract":[{"type":"text","text":"Wraps a closure that will be called after the Reducer pipeline has changed the state with the current action."},{"type":"text","text":" "},{"type":"text","text":"With this structure, a middleware can schedule some callback to be executed with the new state, and evidently access this state to check what’s"},{"type":"text","text":" "},{"type":"text","text":"different. This can be very useful for Middlewares that perform logging, monitoring or telemetry, so you can check the state before and after"},{"type":"text","text":" "},{"type":"text","text":"reducers’ execution, or how much time it took for the whole chain to be called (in case this middleware is the first in the chain, of course)."},{"type":"text","text":" "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is a monoid, that means it can be combined with another "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" to form a new one (that executes both operations in the"},{"type":"text","text":" "},{"type":"text","text":"reverse order) and an identity instance, that when combined with any other "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" changes nothing in the result, acting as a neutral"},{"type":"text","text":" "},{"type":"text","text":"element in composition. The identity of an "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" is the static instance "},{"type":"codeVoice","code":"doNothing()"},{"type":"text","text":", that contains an empty closure for no-op."},{"type":"text","text":" "},{"type":"text","text":"The combination between two "},{"type":"codeVoice","code":"AfterReducer"},{"type":"text","text":" instances occur in reverse order so the first middleware will have its “after reducer” closure executed"},{"type":"text","text":" "},{"type":"text","text":"last. This composition can be achieved by using the operator "},{"type":"codeVoice","code":"<>"}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/AfterReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AfterReducer"}],"url":"\/documentation\/swiftrex\/afterreducer"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"}}}