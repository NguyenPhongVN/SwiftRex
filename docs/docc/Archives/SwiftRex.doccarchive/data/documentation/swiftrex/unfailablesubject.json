{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfailableSubject"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":"> = "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/SubjectType","preciseIdentifier":"s:8SwiftRex11SubjectTypeV","text":"SubjectType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/unfailablesubject"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailableSubject","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Abstraction over passthrough subject types ("},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"PublishSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"Signal"},{"type":"text","text":") from reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"For this specific case, the failure\/error is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":", meaning that this subject can’t emit error."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfailableSubject"}],"title":"UnfailableSubject","roleHeading":"Type Alias","role":"symbol","symbolKind":"typealias","externalID":"s:8SwiftRex17UnfailableSubjecta","modules":[{"name":"SwiftRex"}],"navigatorTitle":[{"kind":"identifier","text":"UnfailableSubject"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/SubjectType":{"role":"symbol","title":"SubjectType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SubjectType"}],"abstract":[{"type":"text","text":"Abstraction over passthrough subject types ("},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"PublishSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"Signal"},{"type":"text","text":") from reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/SubjectType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SubjectType"}],"url":"\/documentation\/swiftrex\/subjecttype"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"},"doc://SwiftRex/documentation/SwiftRex/UnfailableSubject":{"role":"symbol","title":"UnfailableSubject","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfailableSubject"}],"abstract":[{"type":"text","text":"Abstraction over passthrough subject types ("},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"PublishSubject"},{"type":"text","text":", "},{"type":"codeVoice","code":"Signal"},{"type":"text","text":") from reactive frameworks."},{"type":"text","text":" "},{"type":"text","text":"For this specific case, the failure\/error is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":", meaning that this subject can’t emit error."},{"type":"text","text":" "},{"type":"text","text":"This abstraction uses concept similar to type-erasure or protocol witness pattern, wrapping the behaviour of concrete implementations and"},{"type":"text","text":" "},{"type":"text","text":"delegating to them once the wrapper funcions are called."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/UnfailableSubject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnfailableSubject"}],"url":"\/documentation\/swiftrex\/unfailablesubject"}}}