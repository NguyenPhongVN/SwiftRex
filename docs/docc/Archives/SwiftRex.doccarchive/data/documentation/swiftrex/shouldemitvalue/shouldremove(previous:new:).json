{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldRemove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"previous"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"new"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftrex\/shouldemitvalue\/shouldremove(previous:new:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldRemove(previous:new:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Evaluates the predicate and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" in case this should be ignored, or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" in case this change should be emitted. It’s the exact"},{"type":"text","text":" "},{"type":"text","text":"inversion of "},{"type":"codeVoice","code":"shouldEmit"},{"type":"text","text":" and useful for operator "},{"type":"codeVoice","code":".removeDuplicates"},{"type":"text","text":" that some Reactive libraries offer."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldRemove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"previous"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"new"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"shouldRemove(previous:new:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:8SwiftRex15ShouldEmitValueO12shouldRemove8previous3newSbx_xtF","modules":[{"name":"SwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/SwiftRex\/documentation\/SwiftRex","doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue"]]},"references":{"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue/shouldRemove(previous:new:)":{"role":"symbol","title":"shouldRemove(previous:new:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldRemove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"previous"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"new"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Evaluates the predicate and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" in case this should be ignored, or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" in case this change should be emitted. It’s the exact"},{"type":"text","text":" "},{"type":"text","text":"inversion of "},{"type":"codeVoice","code":"shouldEmit"},{"type":"text","text":" and useful for operator "},{"type":"codeVoice","code":".removeDuplicates"},{"type":"text","text":" that some Reactive libraries offer."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue\/shouldRemove(previous:new:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex\/shouldemitvalue\/shouldremove(previous:new:)"},"doc://SwiftRex/documentation/SwiftRex/ShouldEmitValue":{"role":"symbol","title":"ShouldEmitValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ShouldEmitValue"}],"abstract":[{"type":"text","text":"A predicate that determines if a state change should notify subscribers or not, by comparing previous and new states and returning a Bool true in"},{"type":"text","text":" "},{"type":"text","text":"case it should emit it, or false in case it should not emit it."},{"type":"text","text":" "},{"type":"text","text":"It comes with some standard options like "},{"type":"codeVoice","code":".always"},{"type":"text","text":", "},{"type":"codeVoice","code":".never"},{"type":"text","text":", "},{"type":"codeVoice","code":".when(old, new) -> Bool"},{"type":"text","text":" and, for "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" structures, "},{"type":"codeVoice","code":".whenDifferent"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex\/ShouldEmitValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ShouldEmitValue"}],"url":"\/documentation\/swiftrex\/shouldemitvalue"},"doc://SwiftRex/documentation/SwiftRex":{"role":"collection","title":"SwiftRex","abstract":[],"identifier":"doc:\/\/SwiftRex\/documentation\/SwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/swiftrex"}}}