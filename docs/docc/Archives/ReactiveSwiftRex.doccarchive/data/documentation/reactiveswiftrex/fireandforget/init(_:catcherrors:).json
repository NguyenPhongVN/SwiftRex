{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"upstream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SignalProducerProtocol","preciseIdentifier":"s:13ReactiveSwift22SignalProducerProtocolP"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reactiveswiftrex\/fireandforget\/init(_:catcherrors:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex\/FireAndForget\/init(_:catchErrors:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Init a FireAndForget signal producer by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget"},{"type":"text","text":" "},{"type":"text","text":"can’t itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from"},{"type":"text","text":" "},{"type":"text","text":"the happy path."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"title":"init(_:catchErrors:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:16ReactiveSwiftRex13FireAndForgetV_11catchErrorsACyxGqd___xSg5ErrorQyd__ctc0aB022SignalProducerProtocolRd__lufc","modules":[{"name":"ReactiveSwiftRex"}]},"hierarchy":{"paths":[["doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex","doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex\/FireAndForget"]]},"references":{"doc://ReactiveSwiftRex/documentation/ReactiveSwiftRex/FireAndForget/init(_:catchErrors:)":{"role":"symbol","title":"init(_:catchErrors:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Init a FireAndForget signal producer by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget"},{"type":"text","text":" "},{"type":"text","text":"can’t itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from"},{"type":"text","text":" "},{"type":"text","text":"the happy path."}],"identifier":"doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex\/FireAndForget\/init(_:catchErrors:)","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswiftrex\/fireandforget\/init(_:catcherrors:)"},"doc://ReactiveSwiftRex/documentation/ReactiveSwiftRex":{"role":"collection","title":"ReactiveSwiftRex","abstract":[],"identifier":"doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswiftrex"},"doc://ReactiveSwiftRex/documentation/ReactiveSwiftRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is a SignalProducer for when you don’t care about the output of certain async operation. It’s important to notice that this"},{"type":"text","text":" "},{"type":"text","text":"operation can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/ReactiveSwiftRex\/documentation\/ReactiveSwiftRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/reactiveswiftrex\/fireandforget"}}}