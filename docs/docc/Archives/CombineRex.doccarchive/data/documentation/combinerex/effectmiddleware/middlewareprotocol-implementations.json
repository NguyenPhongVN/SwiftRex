{"variants":[{"paths":["\/documentation\/combinerex\/effectmiddleware\/middlewareprotocol-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/MiddlewareProtocol-Implementations","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"article","metadata":{"modules":[{"name":"CombineRex"}],"role":"collectionGroup","title":"MiddlewareProtocol Implementations"},"hierarchy":{"paths":[["doc:\/\/CombineRex\/documentation\/CombineRex","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/eraseToAnyMiddleware()","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:)-h3q4","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:outputAction:)-8wmxq","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:outputAction:state:)-9fkxy","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:state:)-4cpmm","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(outputAction:)-4a2zo","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(outputAction:state:)-r6r4","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(state:)-29acd","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/liftToCollection(action:stateCollection:)-1unku","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/liftToCollection(inputAction:outputAction:state:)","doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/receiveContext(getState:output:)"],"generated":true}],"references":{"doc://CombineRex/documentation/CombineRex/EffectMiddleware/receiveContext(getState:output:)":{"role":"symbol","title":"receiveContext(getState:output:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receiveContext"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetState","preciseIdentifier":"s:8SwiftRex8GetStatea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyActionHandler","preciseIdentifier":"s:8SwiftRex16AnyActionHandlerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Middleware setup. This function is deprecated and should never be used."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/receiveContext(getState:output:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/combinerex\/effectmiddleware\/receivecontext(getstate:output:)"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(state:)-29acd":{"role":"symbol","title":"lift(state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(state:)-29acd","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(state:)-29acd"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(outputAction:state:)-r6r4":{"role":"symbol","title":"lift(outputAction:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(outputAction:state:)-r6r4","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(outputaction:state:)-r6r4"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(inputAction:)-h3q4":{"role":"symbol","title":"lift(inputAction:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"inputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:)-h3q4","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(inputaction:)-h3q4"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware":{"role":"symbol","title":"EffectMiddleware","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectMiddleware"}],"abstract":[{"type":"text","text":"Easiest way to implement a "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":", with a single function that gives you all you need, and from which you can return an "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":"."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectMiddleware"}],"url":"\/documentation\/combinerex\/effectmiddleware"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/liftToCollection(action:stateCollection:)-1unku":{"conformance":{"constraints":[{"type":"codeVoice","code":"InputActionType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Self.OutputActionType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"StateType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"liftToCollection(action:stateCollection:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"liftToCollection"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"CollectionState"},{"kind":"text","text":">("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementIDAction","preciseIdentifier":"s:8SwiftRex15ElementIDActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":">?>, "},{"kind":"externalParam","text":"stateCollection"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CollectionState"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"LiftToCollectionMiddleware","preciseIdentifier":"s:8SwiftRex26LiftToCollectionMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CollectionState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/liftToCollection(action:stateCollection:)-1unku","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lifttocollection(action:statecollection:)-1unku"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(inputAction:outputAction:)-8wmxq":{"role":"symbol","title":"lift(inputAction:outputAction:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"inputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:outputAction:)-8wmxq","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(inputaction:outputaction:)-8wmxq"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(inputAction:outputAction:state:)-9fkxy":{"role":"symbol","title":"lift(inputAction:outputAction:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"inputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:outputAction:state:)-9fkxy","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(inputaction:outputaction:state:)-9fkxy"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(outputAction:)-4a2zo":{"role":"symbol","title":"lift(outputAction:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(outputAction:)-4a2zo","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(outputaction:)-4a2zo"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/eraseToAnyMiddleware()":{"role":"symbol","title":"eraseToAnyMiddleware()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyMiddleware"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyMiddleware","preciseIdentifier":"s:8SwiftRex13AnyMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/eraseToAnyMiddleware()","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/erasetoanymiddleware()"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/liftToCollection(inputAction:outputAction:state:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"StateType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"liftToCollection(inputAction:outputAction:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"liftToCollection"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"CollectionState"},{"kind":"text","text":">("},{"kind":"externalParam","text":"inputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ElementIDAction","preciseIdentifier":"s:8SwiftRex15ElementIDActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"outputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ElementIDAction","preciseIdentifier":"s:8SwiftRex15ElementIDActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutputActionType"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CollectionState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftToCollectionMiddleware","preciseIdentifier":"s:8SwiftRex26LiftToCollectionMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CollectionState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/liftToCollection(inputAction:outputAction:state:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lifttocollection(inputaction:outputaction:state:)"},"doc://CombineRex/documentation/CombineRex/EffectMiddleware/lift(inputAction:state:)-4cpmm":{"role":"symbol","title":"lift(inputAction:state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lift"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"GlobalStateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"inputAction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputActionType"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LiftMiddleware","preciseIdentifier":"s:8SwiftRex14LiftMiddlewareV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GlobalInputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalOutputActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"GlobalStateType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with"},{"type":"text","text":" "},{"type":"text","text":"other middlewares that work on different generic parameters. The global state of your app is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Whole"}]},{"type":"text","text":", and the "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" handles "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Part"}]},{"type":"text","text":", that"},{"type":"text","text":" "},{"type":"text","text":"is a sub-state."},{"type":"text","text":" "},{"type":"text","text":"So for example you may want to have a "},{"type":"codeVoice","code":"GPSMiddleware"},{"type":"text","text":" that knows about the following "},{"type":"codeVoice","code":"struct"},{"type":"text","text":":"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/EffectMiddleware\/lift(inputAction:state:)-4cpmm","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/effectmiddleware\/lift(inputaction:state:)-4cpmm"},"doc://CombineRex/documentation/CombineRex":{"role":"collection","title":"CombineRex","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex","kind":"symbol","type":"topic","url":"\/documentation\/combinerex"}}}