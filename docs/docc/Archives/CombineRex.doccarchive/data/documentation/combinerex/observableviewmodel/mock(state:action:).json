{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mock"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" (("},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") = { _, _, _ in }) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a very simple ObservableViewModel mock, that you can inject in your SwiftUI View for tests or"},{"type":"text","text":" "},{"type":"text","text":"live preview."}]}]},{"kind":"parameters","parameters":[{"name":"state","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initial state mock"}]}]},{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a simple reducer function, of type "},{"type":"codeVoice","code":"(ActionType, inout StateType) -> Void"},{"type":"text","text":", useful if"},{"type":"text","text":" "},{"type":"text","text":"you want to use in SwiftUI live previews and quickly change an UI property when a"},{"type":"text","text":" "},{"type":"text","text":"button is tapped, for example. Itâ€™s like a micro-redux for tests and SwiftUI previews."},{"type":"text","text":" "},{"type":"text","text":"Defaults to do nothing."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":null,"code":["let mock = ObservableViewModel<(user: String, pass: String, buttonEnabled: Bool), ViewAction>.mock(","    state: (user: \"ozzy\", pass: \"\", buttonEnabled: false),","    action: { action, state in","        switch action {","        case let .userChanged(newUser):","            state.user = newUser","            state.buttonEnabled = !state.user.isEmpty && !state.pass.isEmpty","        case let .passwordChanged(newPass):","            state.pass = newPass","            state.buttonEnabled = !state.user.isEmpty && !state.pass.isEmpty","        case .buttonTapped:","            print(\"Button tapped\")","        }","    }",")"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combinerex\/observableviewmodel\/mock(state:action:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/mock(state:action:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Mock for using in tests or SwiftUI previews, available in DEBUG mode only"},{"type":"text","text":" "},{"type":"text","text":"You can use if as a micro-redux for tests and SwiftUI previews, for example:"}],"kind":"symbol","metadata":{"modules":[{"name":"CombineRex"}],"role":"symbol","title":"mock(state:action:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mock"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:10CombineRex19ObservableViewModelC4mock5state6actionACyxq_Gq__yx_05SwiftB012ActionSourceVq_ztctFZ","extendedModule":"CombineRex","platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/CombineRex\/documentation\/CombineRex","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel"]]},"references":{"doc://CombineRex/documentation/CombineRex/ObservableViewModel":{"role":"symbol","title":"ObservableViewModel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableViewModel"}],"abstract":[{"type":"text","text":"A Store Projection made to be used in SwiftUI"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableViewModel"}],"url":"\/documentation\/combinerex\/observableviewmodel"},"doc://CombineRex/documentation/CombineRex":{"role":"collection","title":"CombineRex","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex","kind":"symbol","type":"topic","url":"\/documentation\/combinerex"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/mock(state:action:)":{"role":"symbol","title":"mock(state:action:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mock"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Mock for using in tests or SwiftUI previews, available in DEBUG mode only"},{"type":"text","text":" "},{"type":"text","text":"You can use if as a micro-redux for tests and SwiftUI previews, for example:"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/mock(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/mock(state:action:)"}}}