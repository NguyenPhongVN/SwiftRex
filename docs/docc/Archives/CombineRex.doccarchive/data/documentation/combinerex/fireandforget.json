{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IgnoringOutput"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combinerex\/fireandforget"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/CombineRex\/7Combine9PublisherP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Fire And Forget is a publisher for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"role":"symbol","title":"FireAndForget","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"symbolKind":"struct","externalID":"s:10CombineRex13FireAndForgetV","modules":[{"name":"CombineRex"}],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/CombineRex\/documentation\/CombineRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:)-3djf3","doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:)-9gads","doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:catchErrors:)","doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(scheduler:_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/receive(subscriber:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Failure","doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Output"]},{"title":"Default Implementations","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Publisher-Implementations"],"generated":true}],"references":{"doc://CombineRex/documentation/CombineRex/FireAndForget/Failure":{"role":"symbol","title":"FireAndForget.Failure","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Failure"}],"abstract":[{"type":"text","text":"We’re only able to ignore the output, not the failure, so it’s important that this publisher never fails. To ignore also the failure path"},{"type":"text","text":" "},{"type":"text","text":"please use the init with catchErrors parameter and return nil from it."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Failure","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Failure"}],"url":"\/documentation\/combinerex\/fireandforget\/failure"},"doc://CombineRex/documentation/CombineRex":{"role":"collection","title":"CombineRex","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex","kind":"symbol","type":"topic","url":"\/documentation\/combinerex"},"doc://CombineRex/documentation/CombineRex/FireAndForget/receive(subscriber:)":{"role":"symbol","title":"receive(subscriber:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subscriber"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Attaches the specified subscriber to this publisher."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/receive(subscriber:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/receive(subscriber:)"},"doc://CombineRex/documentation/CombineRex/FireAndForget/init(_:)-9gads":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Init a FireAndForget publisher by providing a closure with the operation to execute and ignore the output."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:)-9gads","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/init(_:)-9gads"},"doc://CombineRex/documentation/CombineRex/FireAndForget":{"role":"symbol","title":"FireAndForget","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FireAndForget"}],"abstract":[{"type":"text","text":"Fire And Forget is a publisher for when you don’t care about the output of certain async operation. It’s important to notice that this operation"},{"type":"text","text":" "},{"type":"text","text":"can’t fail. If you want to also ignore the failure, then you can catchErrors and return nil in the proper init."},{"type":"text","text":" "},{"type":"text","text":"It may complete successfully when task is done."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FireAndForget"}],"url":"\/documentation\/combinerex\/fireandforget"},"doc://CombineRex/documentation/CombineRex/FireAndForget/init(_:catchErrors:)":{"role":"symbol","title":"init(_:catchErrors:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catchErrors"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"IgnoringOutput"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Init a FireAndForget publisher by providing an upstream that could fail, as well as a catchErrors function to ensure that FireAndForget can’t"},{"type":"text","text":" "},{"type":"text","text":"itself fail. You can safely return nil from catchErrors. Otherwise outputs sent from catch errors will NOT be ignored, only those from the"},{"type":"text","text":" "},{"type":"text","text":"happy path."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:catchErrors:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/init(_:catcherrors:)"},"doc://CombineRex/7Combine9PublisherP":{"type":"unresolvable","title":"Combine.Publisher","identifier":"doc:\/\/CombineRex\/7Combine9PublisherP"},"doc://CombineRex/documentation/CombineRex/FireAndForget/init(scheduler:_:)":{"role":"symbol","title":"init(scheduler:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Init a FireAndForget publisher by providing a closure with the operation to execute and ignore the output."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(scheduler:_:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/init(scheduler:_:)"},"doc://CombineRex/documentation/CombineRex/FireAndForget/init(_:)-3djf3":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Init a FireAndForget publisher by providing an upstream that never fails so we can simply ignore its output"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/init(_:)-3djf3","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/init(_:)-3djf3"},"doc://CombineRex/documentation/CombineRex/FireAndForget/Publisher-Implementations":{"role":"collectionGroup","title":"Publisher Implementations","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Publisher-Implementations","kind":"article","type":"topic","url":"\/documentation\/combinerex\/fireandforget\/publisher-implementations"},"doc://CombineRex/documentation/CombineRex/FireAndForget/Output":{"role":"symbol","title":"FireAndForget.Output","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Output"}],"abstract":[{"type":"text","text":"Output type we are ignoring. It matches the FireAndForget generic parameter, so we can ignore anything we want."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/FireAndForget\/Output","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Output"}],"url":"\/documentation\/combinerex\/fireandforget\/output"}}}