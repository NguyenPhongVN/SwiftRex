{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableViewModel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewState"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All you need is to create an instance of this class by projecting the main store and providing maps for state and"},{"type":"text","text":" "},{"type":"text","text":"actions. For the consumers, it will act as a real Store, but in fact it’s only a proxy to the main store but working"},{"type":"text","text":" "},{"type":"text","text":"in types more close to what a View should know, instead of working on global domain."}]},{"type":"codeListing","syntax":null,"code":["            ┌────────┐","            │ Button │────────┐","            └────────┘        │                     ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐             ┏━━━━━━━━━━━━━━━━━━━━━━━┓","       ┌──────────────────┐   │         dispatch                                            ┃                       ┃░","       │      Toggle      │───┼────────────────────▶│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─▶  │────────────▶┃                       ┃░","       └──────────────────┘   │         view event      f: (Event) → Action     app action  ┃                       ┃░","           ┌──────────┐       │                     │                         │             ┃                       ┃░","           │ onAppear │───────┘                                                             ┃                       ┃░","           └──────────┘                             │   ObservableViewModel   │             ┃                       ┃░","                                                                                            ┃                       ┃░","                                                    │     a projection of     │  projection ┃         Store         ┃░","                                                         the actual store                   ┃                       ┃░","                                                    │                         │             ┃                       ┃░","   ┌────────────────────────┐                                                               ┃                       ┃░","   │                        │                       │                         │            ┌┃─ ─ ─ ─ ─ ┐            ┃░","   │    @ObservedObject     │◀ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─    ◀─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ◀─ ─ ─ ─ ─ ─    State                ┃░","   │                        │           view state  │   f: (State) → View     │  app state │ Publisher │            ┃░","   └────────────────────────┘                                        State                  ┳ ─ ─ ─ ─ ─             ┃░","     │          │          │                        └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘             ┗━━━━━━━━━━━━━━━━━━━━━━━┛░","     ▼          ▼          ▼                                                                 ░░░░░░░░░░░░░░░░░░░░░░░░░","┌────────┐ ┌────────┐ ┌────────┐","│  Text  │ │  List  │ │ForEach │","└────────┘ └────────┘ └────────┘"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/combinerex\/observableviewmodel"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/CombineRex\/7Combine16ObservableObjectP","doc:\/\/CombineRex\/8SwiftRex13ActionHandlerP","doc:\/\/CombineRex\/8SwiftRex13StateProviderP","doc:\/\/CombineRex\/8SwiftRex9StoreTypeP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A Store Projection made to be used in SwiftUI"}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"ObservableViewModel"}],"role":"symbol","title":"ObservableViewModel","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableViewModel"}],"symbolKind":"class","externalID":"s:10CombineRex19ObservableViewModelC","modules":[{"name":"CombineRex"}],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/CombineRex\/documentation\/CombineRex"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/init(initialState:store:)","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/init(initialState:store:emitsValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/state","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/statePublisher"]},{"title":"Instance Methods","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/dispatch(_:)"]},{"title":"Type Methods","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/mock(state:action:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/ObservableObject-Implementations","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/ActionHandler-Implementations","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/StoreType-Implementations","doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/StateProvider-Implementations"],"generated":true}],"references":{"doc://CombineRex/documentation/CombineRex/ObservableViewModel/StateProvider-Implementations":{"role":"collectionGroup","title":"StateProvider Implementations","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/StateProvider-Implementations","kind":"article","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/stateprovider-implementations"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/ObservableObject-Implementations":{"role":"collectionGroup","title":"ObservableObject Implementations","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/ObservableObject-Implementations","kind":"article","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/observableobject-implementations"},"doc://CombineRex/8SwiftRex9StoreTypeP":{"type":"unresolvable","title":"SwiftRex.StoreType","identifier":"doc:\/\/CombineRex\/8SwiftRex9StoreTypeP"},"doc://CombineRex/8SwiftRex13StateProviderP":{"type":"unresolvable","title":"SwiftRex.StateProvider","identifier":"doc:\/\/CombineRex\/8SwiftRex13StateProviderP"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/dispatch(_:)":{"role":"symbol","title":"dispatch(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dispatch"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"DispatchedAction","preciseIdentifier":"s:8SwiftRex16DispatchedActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"The function that allows Views, ViewControllers, Presenters to dispatch actions to the store."},{"type":"text","text":" "},{"type":"text","text":"Also way for a "},{"type":"codeVoice","code":"Middleware"},{"type":"text","text":" to trigger their own actions, usually in response to events or async operations."}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/dispatch(_:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/dispatch(_:)"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/init(initialState:store:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(initialState:store:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/init(initialState:store:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/init(initialstate:store:)"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/mock(state:action:)":{"role":"symbol","title":"mock(state:action:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mock"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ActionSource","preciseIdentifier":"s:8SwiftRex12ActionSourceV"},{"kind":"text","text":", "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"ActionType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ObservableViewModel","preciseIdentifier":"s:10CombineRex19ObservableViewModelC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"StateType"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Mock for using in tests or SwiftUI previews, available in DEBUG mode only"},{"type":"text","text":" "},{"type":"text","text":"You can use if as a micro-redux for tests and SwiftUI previews, for example:"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/mock(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/mock(state:action:)"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/StoreType-Implementations":{"role":"collectionGroup","title":"StoreType Implementations","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/StoreType-Implementations","kind":"article","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/storetype-implementations"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/statePublisher":{"role":"symbol","title":"statePublisher","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"statePublisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnfailablePublisherType","preciseIdentifier":"s:8SwiftRex23UnfailablePublisherTypea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The state publisher that can be observed by counterparts"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/statePublisher","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/statepublisher"},"doc://CombineRex/8SwiftRex13ActionHandlerP":{"type":"unresolvable","title":"SwiftRex.ActionHandler","identifier":"doc:\/\/CombineRex\/8SwiftRex13ActionHandlerP"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel":{"role":"symbol","title":"ObservableViewModel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableViewModel"}],"abstract":[{"type":"text","text":"A Store Projection made to be used in SwiftUI"}],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableViewModel"}],"url":"\/documentation\/combinerex\/observableviewmodel"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/state":{"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewState"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/state","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/state"},"doc://CombineRex/7Combine16ObservableObjectP":{"type":"unresolvable","title":"Combine.ObservableObject","identifier":"doc:\/\/CombineRex\/7Combine16ObservableObjectP"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/ActionHandler-Implementations":{"role":"collectionGroup","title":"ActionHandler Implementations","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/ActionHandler-Implementations","kind":"article","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/actionhandler-implementations"},"doc://CombineRex/documentation/CombineRex/ObservableViewModel/init(initialState:store:emitsValue:)":{"role":"symbol","title":"init(initialState:store:emitsValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"emitsValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ShouldEmitValue","preciseIdentifier":"s:8SwiftRex15ShouldEmitValueO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">)"}],"abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex\/ObservableViewModel\/init(initialState:store:emitsValue:)","kind":"symbol","type":"topic","url":"\/documentation\/combinerex\/observableviewmodel\/init(initialstate:store:emitsvalue:)"},"doc://CombineRex/documentation/CombineRex":{"role":"collection","title":"CombineRex","abstract":[],"identifier":"doc:\/\/CombineRex\/documentation\/CombineRex","kind":"symbol","type":"topic","url":"\/documentation\/combinerex"}}}