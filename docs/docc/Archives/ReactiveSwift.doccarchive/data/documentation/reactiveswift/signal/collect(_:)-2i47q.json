{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"collect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"shouldEmit"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" (["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/Signal","preciseIdentifier":"s:13ReactiveSwift6SignalC","text":"Signal"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A signal of arrays of values, as instructed by the "},{"type":"codeVoice","code":"shouldEmit"},{"type":"text","text":" "},{"type":"text","text":"closure."}]}]},{"kind":"parameters","parameters":[{"name":"shouldEmit","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure to determine, when every time a new value is received,"},{"type":"text","text":" "},{"type":"text","text":"whether the collected values should be emitted. The new value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" included in the collected values, and is included when"},{"type":"text","text":" "},{"type":"text","text":"the next value is received."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self"},{"type":"text","text":" completes any remaining values will be sent, regardless of the"},{"type":"text","text":" "},{"type":"text","text":"collected values matching "},{"type":"codeVoice","code":"shouldEmit"},{"type":"text","text":" or not."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"self"},{"type":"text","text":" completes without having emitted any value, an empty array would be"},{"type":"text","text":" "},{"type":"text","text":"emitted, followed by the completion of the returned "},{"type":"codeVoice","code":"Signal"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["let (signal, observer) = Signal<Int, Never>.pipe()","","signal","    .collect { values, value in value == 7 }","    .observeValues { print($0) }","","observer.send(value: 1)","observer.send(value: 1)","observer.send(value: 7)","observer.send(value: 7)","observer.send(value: 5)","observer.send(value: 6)","observer.sendCompleted()","","\/\/ Output:","\/\/ [1, 1]","\/\/ [7]","\/\/ [7, 5, 6]"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reactiveswift\/signal\/collect(_:)-2i47q"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/Signal\/collect(_:)-2i47q","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Collect values from "},{"type":"codeVoice","code":"self"},{"type":"text","text":", and emit them if the predicate passes."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Error"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"collect(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"collect"},{"kind":"text","text":"((["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Signal","preciseIdentifier":"s:13ReactiveSwift6SignalC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:13ReactiveSwift6SignalC7collectyACySayxGq_GSbAE_xtcF","extendedModule":"ReactiveSwift","modules":[{"name":"ReactiveSwift"}]},"hierarchy":{"paths":[["doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/Signal"]]},"references":{"doc://ReactiveSwift/documentation/ReactiveSwift/Signal/collect(_:)-2i47q":{"conformance":{"constraints":[{"type":"codeVoice","code":"Error"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"collect(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"collect"},{"kind":"text","text":"((["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Signal","preciseIdentifier":"s:13ReactiveSwift6SignalC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Collect values from "},{"type":"codeVoice","code":"self"},{"type":"text","text":", and emit them if the predicate passes."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/Signal\/collect(_:)-2i47q","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift\/signal\/collect(_:)-2i47q"},"doc://ReactiveSwift/documentation/ReactiveSwift":{"role":"collection","title":"ReactiveSwift","abstract":[],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift"},"doc://ReactiveSwift/documentation/ReactiveSwift/Signal":{"role":"symbol","title":"Signal","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Signal"}],"abstract":[{"type":"text","text":"A push-driven stream that sends Events over time, parameterized by the type"},{"type":"text","text":" "},{"type":"text","text":"of values being sent ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") and the type of failure that can occur"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"Error"},{"type":"text","text":"). If no failures should be possible, Never can be specified for"},{"type":"text","text":" "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/Signal","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Signal"}],"url":"\/documentation\/reactiveswift\/signal"}}}