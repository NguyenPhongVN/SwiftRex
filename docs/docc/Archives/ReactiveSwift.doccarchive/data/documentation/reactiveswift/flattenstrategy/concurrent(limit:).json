{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concurrent"},{"kind":"text","text":"("},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/FlattenStrategy","preciseIdentifier":"s:13ReactiveSwift15FlattenStrategyV","text":"FlattenStrategy"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In other words, if an inner stream is received when a previous inner stream has"},{"type":"text","text":" "},{"type":"text","text":"yet terminated, the received stream would be enqueued."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The flattened stream of values completes only when the stream of streams, and all"},{"type":"text","text":" "},{"type":"text","text":"the inner streams it sent, have completed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any interruption of inner streams is treated as completion, and does not interrupt"},{"type":"text","text":" "},{"type":"text","text":"the flattened stream of values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any failure from the inner streams is propagated immediately to the flattened"},{"type":"text","text":" "},{"type":"text","text":"stream of values."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"limit > 0"},{"type":"text","text":"."}]}],"type":"aside","name":"Precondition"}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reactiveswift\/flattenstrategy\/concurrent(limit:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/FlattenStrategy\/concurrent(limit:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The stream of streams is merged with the given concurrency cap, so that any value"},{"type":"text","text":" "},{"type":"text","text":"sent by any of the inner streams on the fly is forwarded immediately to the"},{"type":"text","text":" "},{"type":"text","text":"flattened stream of values."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concurrent"},{"kind":"text","text":"("},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"FlattenStrategy","preciseIdentifier":"s:13ReactiveSwift15FlattenStrategyV"}],"title":"concurrent(limit:)","roleHeading":"Type Method","role":"symbol","symbolKind":"method","externalID":"s:13ReactiveSwift15FlattenStrategyV10concurrent5limitACSu_tFZ","modules":[{"name":"ReactiveSwift"}]},"hierarchy":{"paths":[["doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/FlattenStrategy"]]},"references":{"doc://ReactiveSwift/documentation/ReactiveSwift":{"role":"collection","title":"ReactiveSwift","abstract":[],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift"},"doc://ReactiveSwift/documentation/ReactiveSwift/FlattenStrategy/concurrent(limit:)":{"role":"symbol","title":"concurrent(limit:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"concurrent"},{"kind":"text","text":"("},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"FlattenStrategy","preciseIdentifier":"s:13ReactiveSwift15FlattenStrategyV"}],"abstract":[{"type":"text","text":"The stream of streams is merged with the given concurrency cap, so that any value"},{"type":"text","text":" "},{"type":"text","text":"sent by any of the inner streams on the fly is forwarded immediately to the"},{"type":"text","text":" "},{"type":"text","text":"flattened stream of values."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/FlattenStrategy\/concurrent(limit:)","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift\/flattenstrategy\/concurrent(limit:)"},"doc://ReactiveSwift/documentation/ReactiveSwift/FlattenStrategy":{"role":"symbol","title":"FlattenStrategy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlattenStrategy"}],"abstract":[{"type":"text","text":"Describes how a stream of inner streams should be flattened into a stream of values."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/FlattenStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlattenStrategy"}],"url":"\/documentation\/reactiveswift\/flattenstrategy"}}}