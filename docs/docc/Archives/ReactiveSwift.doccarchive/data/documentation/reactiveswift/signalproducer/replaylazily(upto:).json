{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replayLazily"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upTo"},{"kind":"text","text":" "},{"kind":"internalParam","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/SignalProducer","preciseIdentifier":"s:13ReactiveSwift14SignalProducerV","text":"SignalProducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A caching producer that will hold up to last "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" "},{"type":"text","text":"values."}]}]},{"kind":"parameters","parameters":[{"name":"capacity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number of values to hold."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The underlying "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":" will not be started until "},{"type":"codeVoice","code":"self"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"started for the first time. When subscribing to this producer, all"},{"type":"text","text":" "},{"type":"text","text":"previous values (up to "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":") will be emitted, followed by any new"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you find yourself needing "},{"type":"emphasis","inlineContent":[{"type":"text","text":"the current value"}]},{"type":"text","text":" (the last buffered"},{"type":"text","text":" "},{"type":"text","text":"value) you should consider using "},{"type":"codeVoice","code":"PropertyType"},{"type":"text","text":" instead, which, unlike"},{"type":"text","text":" "},{"type":"text","text":"this operator, will guarantee at compile time that thereâ€™s always a"},{"type":"text","text":" "},{"type":"text","text":"buffered value. This operator is not recommended in most cases, as it"},{"type":"text","text":" "},{"type":"text","text":"will introduce an implicit relationship between the original client and"},{"type":"text","text":" "},{"type":"text","text":"the rest, so consider alternatives like "},{"type":"codeVoice","code":"PropertyType"},{"type":"text","text":", or representing"},{"type":"text","text":" "},{"type":"text","text":"your stream using a "},{"type":"codeVoice","code":"Signal"},{"type":"text","text":" instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator is only recommended when you absolutely need to introduce"},{"type":"text","text":" "},{"type":"text","text":"a layer of caching in front of another "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" must be non-negative integer."}]}],"type":"aside","name":"Precondition"}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reactiveswift\/signalproducer\/replaylazily(upto:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/SignalProducer\/replayLazily(upTo:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":" that will multicast values emitted by"},{"type":"text","text":" "},{"type":"text","text":"the underlying producer, up to "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that all clients of this "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":" will see the same"},{"type":"text","text":" "},{"type":"text","text":"version of the emitted values\/errors."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Error"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"replayLazily(upTo:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replayLazily"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SignalProducer","preciseIdentifier":"s:13ReactiveSwift14SignalProducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:13ReactiveSwift14SignalProducerV12replayLazily4upToACyxq_GSi_tF","extendedModule":"ReactiveSwift","modules":[{"name":"ReactiveSwift"}]},"hierarchy":{"paths":[["doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/SignalProducer"]]},"references":{"doc://ReactiveSwift/documentation/ReactiveSwift":{"role":"collection","title":"ReactiveSwift","abstract":[],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift"},"doc://ReactiveSwift/documentation/ReactiveSwift/SignalProducer":{"role":"symbol","title":"SignalProducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalProducer"}],"abstract":[{"type":"text","text":"A SignalProducer creates Signals that can produce values of type "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" "},{"type":"text","text":"and\/or fail with errors of type "},{"type":"codeVoice","code":"Error"},{"type":"text","text":". If no failure should be possible,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" can be specified for "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/SignalProducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SignalProducer"}],"url":"\/documentation\/reactiveswift\/signalproducer"},"doc://ReactiveSwift/documentation/ReactiveSwift/SignalProducer/replayLazily(upTo:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Error"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"replayLazily(upTo:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replayLazily"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SignalProducer","preciseIdentifier":"s:13ReactiveSwift14SignalProducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":" that will multicast values emitted by"},{"type":"text","text":" "},{"type":"text","text":"the underlying producer, up to "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that all clients of this "},{"type":"codeVoice","code":"SignalProducer"},{"type":"text","text":" will see the same"},{"type":"text","text":" "},{"type":"text","text":"version of the emitted values\/errors."}],"identifier":"doc:\/\/ReactiveSwift\/documentation\/ReactiveSwift\/SignalProducer\/replayLazily(upTo:)","kind":"symbol","type":"topic","url":"\/documentation\/reactiveswift\/signalproducer\/replaylazily(upto:)"}}}